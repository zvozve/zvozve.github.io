<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSGO控制台</title>
    <url>/2022/03/18/CSGO/CSGO%E6%8E%A7%E5%88%B6%E5%8F%B0/</url>
    <content><![CDATA[<p>打B5时一键发刀</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bind F5 &quot;say_team !drop&quot; </span><br></pre></td></tr></table></figure>

<p>打B5和5E时一键发起暂停投票</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bind F6 &quot;say_team !pause&quot;  </span><br></pre></td></tr></table></figure>

<p>打B5和5E时一键发起取消暂停投票</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bind F7 &quot;say_team !unpause&quot;</span><br></pre></td></tr></table></figure>

<p>一键丢掉雷包。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bind &quot;6&quot; &quot;use weapon_c4;drop&quot;</span><br></pre></td></tr></table></figure>

<p>两种一键切换左右手写法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bind &quot;L&quot; &quot;toggle cl_righthand 0 1&quot; </span><br></pre></td></tr></table></figure>

<p>消音器单独绑定为鼠标侧键</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bind mouse2 &quot;+zoom&quot;; </span><br><span class="line"></span><br><span class="line">bind mouse4 &quot;+attack2&quot;;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>CSGO</category>
      </categories>
      <tags>
        <tag>CSGO</tag>
      </tags>
  </entry>
  <entry>
    <title>Hackintosh</title>
    <url>/2022/04/10/Hackintosh/Hachintosh/</url>
    <content><![CDATA[<h1 id="硬盘安装黑苹果"><a href="#硬盘安装黑苹果" class="headerlink" title="硬盘安装黑苹果"></a>硬盘安装黑苹果</h1><p>参考链接</p>
<blockquote>
<p><a class="link"   href="https://www.bilibili.com/video/BV1Vb411U735" >硬盘安装黑苹果<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://www.bilibili.com/video/BV1ba4y1L7CV" >2020年AMD R52600最新黑苹果教程，无需u盘直接硬盘安装，看了不会别找我<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h2 id="下载镜像和efi文件"><a href="#下载镜像和efi文件" class="headerlink" title="下载镜像和efi文件"></a>下载镜像和efi文件</h2><p>工具🔧：迅雷或者各家云盘</p>
<p>镜像：黑果小兵的公众号</p>
<p>efi：github或者加交流群（自己找）</p>
<h2 id="准备容器（硬盘）"><a href="#准备容器（硬盘）" class="headerlink" title="准备容器（硬盘）"></a>准备容器（硬盘）</h2><p>工具🔧：DiskGenius</p>
<p><strong>目标盘</strong></p>
<blockquote>
<p>目标盘要有esp分区且分区格式为guid</p>
</blockquote>
<p>将硬盘分出来一个区（50g左右）</p>
<p>分配盘符后<strong>不要格式化</strong></p>
<p><strong>安装工具盘</strong></p>
<p>将硬盘分出来一个区（20g左右）</p>
<p>分配盘符后<strong>不要格式化</strong></p>
<h2 id="处理镜像"><a href="#处理镜像" class="headerlink" title="处理镜像"></a>处理镜像</h2><p>工具🔧：软碟通、7z、leadra</p>
<p>1.利用软碟通把黑苹果dmg 镜像转换为iso格式</p>
<p>2.改后缀名为cdr</p>
<p>3.用7zip提取镜像中的hfsx文件用于制作安装盘</p>
<p>4.用leadra工具把提取的hfsx文件写入到安装工具盘</p>
<p><strong>取消底下三个勾选</strong></p>
<p>5.以<strong>管理员</strong>打开CMD</p>
<p>选择镜像所在磁盘分区</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">diskpart</span><br><span class="line"><span class="built_in">list</span> disk</span><br><span class="line">select disk <span class="number">1</span>（指定硬盘号）</span><br><span class="line"><span class="built_in">list</span> partition</span><br><span class="line">select partition <span class="number">2</span>（指定分区号）</span><br><span class="line"><span class="built_in">set</span> id=<span class="number">48465300</span><span class="number">-0000</span><span class="number">-11</span>AA-AA11<span class="number">-00306543</span>ECAC</span><br></pre></td></tr></table></figure>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h1 id="洗白"><a href="#洗白" class="headerlink" title="洗白"></a>洗白</h1><p>工具🔧：OC Auxiliary Tools、PlistEdit Pro</p>
<p><a class="link"   href="https://blog.csdn.net/KGD_Judy/article/details/118943312" >洗白教程<i class="fas fa-external-link-alt"></i></a></p>
<p>在Win下查看MAC地址</p>
<h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><p>1.<strong>俩系统时间不一致</strong></p>
<p>Win下安装“双系统时间同步补丁.reg”</p>
<p>2.<strong>连接鼠标时禁用Mac触控板</strong></p>
<p>在辅助功能里设置</p>
<p>3.<strong>屏蔽独显</strong></p>
<p>用PlistEdit Pro打开config，搜索找到boot-args,添加-wegnoegpu参数，之后保存重启即可</p>
<p>4.<strong>开机跑码</strong></p>
<p>升级OC，使用OCAT更新</p>
<p>5.修饰键</p>
<table>
<thead>
<tr>
<th>macOS</th>
<th>Fn</th>
<th>⌃ Control</th>
<th>⌥ Option</th>
<th>⌘ Command</th>
<th>Space</th>
<th>⌘ Command</th>
<th>⌥ Option</th>
</tr>
</thead>
<tbody><tr>
<td>正常Hackintosh</td>
<td>⌃ Control</td>
<td>Fn</td>
<td>⌘ Command</td>
<td>⌥ Option</td>
<td>Space</td>
<td>⌥ Option</td>
<td>⌃ Control</td>
</tr>
<tr>
<td>我的Hackintosh</td>
<td>⌥ Option</td>
<td>Fn</td>
<td>⌘ Command</td>
<td>⌃ Control</td>
<td>Space</td>
<td>⌃ Control</td>
<td>⌥ Option</td>
</tr>
<tr>
<td>修改后</td>
<td>⌥ Option</td>
<td>Fn</td>
<td>⌃ Control</td>
<td>⌘ Command</td>
<td>Space</td>
<td>⌘ Command</td>
<td>⌥ Option</td>
</tr>
<tr>
<td>Windows</td>
<td>Ctrl</td>
<td>Fn</td>
<td>❖Windows</td>
<td>Alt</td>
<td>Space</td>
<td>Alt</td>
<td>Ctrl</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Hackintosh</category>
      </categories>
      <tags>
        <tag>Hackintosh</tag>
      </tags>
  </entry>
  <entry>
    <title>FFMPEG常用指令</title>
    <url>/2022/03/18/FFMPEG/FFMPEG%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="XXX2MP4"><a href="#XXX2MP4" class="headerlink" title="XXX2MP4"></a>XXX2MP4</h2><p><strong>flv 2 MP4</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i filename.flv -c:v libx264 -crf 19 -strict experimental filename.mp4</span><br></pre></td></tr></table></figure>

<p><strong>mkv 2 mp4</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i filename.mkv -vcodec copy -acodec copy filename.mp4</span><br></pre></td></tr></table></figure>

<p><strong>rm 2 mp4</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i filename.rmvb -c:v libx264 -strict -2 filename.mp4</span><br></pre></td></tr></table></figure>

<p><strong>ts 2 mp4</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i filename.ts -c copy -map 0:v -map 0:a -bsf:a aac_adtstoasc filename.mp4</span><br></pre></td></tr></table></figure>

<p><strong>wmv 2 MP4</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i filename.wmv filename.mp4</span><br></pre></td></tr></table></figure>

<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><strong>合并音视频</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i filename.mp4 -i filename.m4a -c:v copy -c:a aac -strict experimental filename.mp4</span><br></pre></td></tr></table></figure>

<p><strong>提取MP3</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i filename.mp4 -f mp3 -vn filename.mp3</span><br></pre></td></tr></table></figure>



<p><strong>修复MP4</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i filename.mp4 -codec copy filename.mp4</span><br></pre></td></tr></table></figure>

<p><strong>剪视频</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i filename.mp4 -ss 00:10:02 -to 00:41:39 filename1.mp4</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>FFMPEG</category>
      </categories>
      <tags>
        <tag>FFMPEG</tag>
      </tags>
  </entry>
  <entry>
    <title>GTAV默认目录（EPIC）</title>
    <url>/2022/04/17/GTAV/GTAV%E9%BB%98%E8%AE%A4%E7%9B%AE%E5%BD%95%EF%BC%88EPIC%EF%BC%89/</url>
    <content><![CDATA[<h1 id="GTAV默认目录（EPIC）"><a href="#GTAV默认目录（EPIC）" class="headerlink" title="GTAV默认目录（EPIC）"></a>GTAV默认目录（EPIC）</h1><h2 id="文件夹"><a href="#文件夹" class="headerlink" title="文件夹"></a>文件夹</h2><p>GTAV.egstore</p>
<p>GTAV\ReadMe</p>
<p>GTAV\Redistributables</p>
<p>GTAV\update</p>
<p>GTAV\x64</p>
<h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><p>GTAV\bink2w64.dll</p>
<p>GTAV\common.rpf</p>
<p>GTAV\d3dcompiler_46.dll</p>
<p>GTAV\d3dcsx_46.dll</p>
<p>GTAV\EOSSDK-Win64-Shipping.dll</p>
<p>GTAV\GFSDK_ShadowLib.win64.dll</p>
<p>GTAV\GFSDK_TXAA.win64.dll</p>
<p>GTAV\GFSDK_TXAA_AlphaResolve.win64.dll</p>
<p>GTAV\GPUPerfAPIDX11-x64.dll</p>
<p>GTAV\GTA5.exe</p>
<p>GTAV\NvPmApi.Core.win64.dll</p>
<p>GTAV\PlayGTAV.exe</p>
<p>GTAV\uninstall.exe</p>
<p>GTAV\version.txt</p>
<p>GTAV\x64a.rpf</p>
<p>GTAV\x64b.rpf</p>
<p>GTAV\x64c.rpf</p>
<p>GTAV\x64d.rpf</p>
<p>GTAV\x64e.rpf</p>
<p>GTAV\x64f.rpf</p>
<p>GTAV\x64g.rpf</p>
<p>GTAV\x64h.rpf</p>
<p>GTAV\x64i.rpf</p>
<p>GTAV\x64j.rpf</p>
<p>GTAV\x64k.rpf</p>
<p>GTAV\x64l.rpf</p>
<p>GTAV\x64m.rpf</p>
<p>GTAV\x64n.rpf</p>
<p>GTAV\x64o.rpf</p>
<p>GTAV\x64p.rpf</p>
<p>GTAV\x64q.rpf</p>
<p>GTAV\x64r.rpf</p>
<p>GTAV\x64s.rpf</p>
<p>GTAV\x64t.rpf</p>
<p>GTAV\x64u.rpf</p>
<p>GTAV\x64v.rpf</p>
<p>GTAV\x64w.rpf</p>
<p>GTAV.egstore\83A9C2534C1631F478E848B8DBC9D8C8.mancpn</p>
<p>GTAV.egstore\83A9C2534C1631F478E848B8DBC9D8C8.manifest</p>
<p>GTAV\Redistributables\Rockstar-Games-Epic.exe</p>
<p>GTAV\Redistributables\Rockstar-Games-Launcher.exe</p>
<p>GTAV\Redistributables\Social-Club-Setup.exe</p>
<p>GTAV\update\update.rpf</p>
<p>GTAV\x64\metadata.dat</p>
]]></content>
      <categories>
        <category>GTAV</category>
      </categories>
      <tags>
        <tag>GTAV</tag>
      </tags>
  </entry>
  <entry>
    <title>GTAV装MOD</title>
    <url>/2022/04/10/GTAV/GTAV%E8%A3%85MOD/</url>
    <content><![CDATA[<h1 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h1><p>1.在GTAV根目录添加配置文件</p>
<p>单独添加有</p>
<blockquote>
<p><strong>1.安装ScriptHookV</strong></p>
<p>只把这2个（dinput8.dll ScriptHookV.dll）复制到GTA5游戏根目录</p>
<p>NativeTrainer.asi 这个是修改器是英文版可以不复制。</p>
<p><strong>2.安装ScriptHookVDotNet</strong></p>
<p>把文件（README.md ScriptHookVDotNet.asi ScriptHookVDotNet.dll ScriptHookVDotNet.ini ScriptHookVDotNet.xml）复制到GTA5游戏根目录</p>
<p>3.安装NativeUI.dll</p>
<p>直接复制scripts文件夹到你的GTA5.exe游戏根目录</p>
<p><strong>4.安装 LUA Plugin for Script Hook V 10.1</strong></p>
<p>为以后运行LUA格式的MOD做准备。把scripts文件夹里面的文件复制进GTA5游戏目录scripts文件夹里，把LUA.asi复制进GTA5游戏根目录。</p>
<p>来自 <a class="link"   href="https://www.iwyv.com/youxi/2021-04-12/47711.html" >https://www.iwyv.com/youxi/2021-04-12/47711.html<i class="fas fa-external-link-alt"></i></a> </p>
</blockquote>
<p>可以下整合包</p>
<p>2.安装openiv</p>
<p>打开openiv，添加GTAV定位目录</p>
<p>进入软件后安装3个插件</p>
<p>3.打开openiv的编辑模式，在openiv中定位到Update/update.rpf/common/data，找到dlclist.xml，右键编辑，提示复制到mods目录，点击复制</p>
<p>4.在openiv中定位到<strong>mods</strong>/Update/update.rpf/common/data，替换gameconfig.xml文件</p>
<h1 id="添加MOD"><a href="#添加MOD" class="headerlink" title="添加MOD"></a>添加MOD</h1><h2 id="添加载具MOD"><a href="#添加载具MOD" class="headerlink" title="添加载具MOD"></a>添加载具MOD</h2><p>1.建立目录mods/Update/x64/dlcpacks，将需要添加的<strong>mod目录</strong>拖进去</p>
<p>2.在openiv中定位到mods/Update/update.rpf/common/data/dlclist.xml，右键编辑，添加mod说明文件里面的一行代码</p>
<h2 id="添加人物MOD"><a href="#添加人物MOD" class="headerlink" title="添加人物MOD"></a>添加人物MOD</h2><p>下载addonpeds</p>
<p>1.把addonpeds的文件添加到GTAV根目录，除了dlcpacks/addonpeds</p>
<p>2.把addonpeds目录中dlcpacks下的“addonpeds”目录拷贝到mods/Update/x64/dlcpacks/</p>
<p>3.在openiv中定位目录mods/Update/x64/dlcpacks/dlc.rpf/pxx(忘了).rpf，把人物mod的四个文件拖进去</p>
<p>4.以管理员身份打开addonpeds.exe，添加角色，名字和mod配置文件名一样，设置性别和组合（一般是非组合）情况，点击rebuild，重建</p>
<h2 id="添加GPS语音包"><a href="#添加GPS语音包" class="headerlink" title="添加GPS语音包"></a>添加GPS语音包</h2><blockquote>
<p>参考：<a class="link"   href="https://www.cnntt.com/archives/4446" >https://www.cnntt.com/archives/4446<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<p>下载文件，将“Scripts”文件夹放在GTA5的根目录下，然后进入游戏就可以了。</p>
<p>游戏内修改设置:</p>
<p>重新读取设定文件，按键盘(~)键，输入：</p>
<p>“RELOADWAZE” - 重新加载 Waze.ini 文件。</p>
<p>“WAZECHANGEVOICE” 回车然后输入语音文件夹名称 - 换语音。</p>
<p>“WAZEVOLUME” 回车然后输入0-100 - 调声量。</p>
<p>“WAZELIVE ON/OFF” - 现场报告开关。</p>
<p>“WAZEUNIT METER/MILE” - 米/英里切换。</p>
]]></content>
      <categories>
        <category>GTAV</category>
      </categories>
      <tags>
        <tag>GTAV</tag>
      </tags>
  </entry>
  <entry>
    <title>游戏常见问题及解决方案</title>
    <url>/2022/04/17/GTAV/%E6%B8%B8%E6%88%8F%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h2 id="卡win键"><a href="#卡win键" class="headerlink" title="卡win键"></a>卡win键</h2><p>方案一：win＋Alt，同时按下，反复三次。</p>
<p>方案二：Fn+End+win。</p>
<p>方案三：按下<strong>Win</strong> lock键。</p>
<p>方案四：禁用<strong>win</strong>键（需要键盘支持，不一定有效）</p>
<blockquote>
<p>例：常规键盘Fn+win；IKBC键盘Fn+Pause。</p>
</blockquote>
<p>方案五：Win+L<strong>锁定</strong>电脑，然后解锁即可。</p>
]]></content>
      <categories>
        <category>GTAV</category>
      </categories>
      <tags>
        <tag>GTAV</tag>
      </tags>
  </entry>
  <entry>
    <title>Github分支管理</title>
    <url>/2022/04/17/Git/Github%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="Github-分支管理"><a href="#Github-分支管理" class="headerlink" title="Github 分支管理"></a>Github 分支管理</h1><p><a class="link"   href="https://blog.csdn.net/top_code/article/details/51931916" >参考<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="创建-切换分支"><a href="#创建-切换分支" class="headerlink" title="创建/切换分支"></a>创建/切换分支</h2><p>创建分支的同时切换到该分支上，命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -b [branch name]</span><br></pre></td></tr></table></figure>

<p>效果相当于以下两步操作：</p>
<p>本地创建分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch [branch name]</span><br></pre></td></tr></table></figure>

<p>切换到分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout [branch name]</span><br></pre></td></tr></table></figure>

<h2 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h2><h3 id="删除本地分支"><a href="#删除本地分支" class="headerlink" title="删除本地分支"></a>删除本地分支</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -d [branch name]</span><br></pre></td></tr></table></figure>

<h3 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin :[branch name]</span><br></pre></td></tr></table></figure>

<h2 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h2><h3 id="查看本地分支"><a href="#查看本地分支" class="headerlink" title="查看本地分支"></a>查看本地分支</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* master</span><br><span class="line"><span class="comment">// * 标识的是你当前所在的分支。</span></span><br></pre></td></tr></table></figure>

<h3 id="查看远程分支"><a href="#查看远程分支" class="headerlink" title="查看远程分支"></a>查看远程分支</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -r</span><br></pre></td></tr></table></figure>

<h3 id="查看所有分支"><a href="#查看所有分支" class="headerlink" title="查看所有分支"></a>查看所有分支</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure>

<h2 id="推送分支"><a href="#推送分支" class="headerlink" title="推送分支"></a>推送分支</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin [branch name]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git报错记录</title>
    <url>/2022/04/17/Git/Git%E6%8A%A5%E9%94%99%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="Git报错"><a href="#Git报错" class="headerlink" title="Git报错"></a>Git报错</h1><h2 id="443"><a href="#443" class="headerlink" title="443"></a>443</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>

<h2 id="10054"><a href="#10054" class="headerlink" title="10054"></a>10054</h2><p><a class="link"   href="https://blog.csdn.net/weixin_43945983/article/details/110882074" >参考<i class="fas fa-external-link-alt"></i></a></p>
<p>打开Git命令页面，执行git命令脚本：修改设置，解除ssl验证</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global http.sslverify &quot;false&quot;</span><br></pre></td></tr></table></figure>

<h2 id="command-not-found"><a href="#command-not-found" class="headerlink" title="command not found"></a>command not found</h2><p><a class="link"   href="https://www.cnblogs.com/chy18883701161/p/12759564.html" >参考<i class="fas fa-external-link-alt"></i></a></p>
<p>此种情况常出现在复制、粘贴命令时，命令开头往往会有多余的空格。</p>
<p>检查命令中是否有多余的空格，去除多余的空格即可。</p>
<h2 id="No-configured-push-destination"><a href="#No-configured-push-destination" class="headerlink" title="No configured push destination."></a>No configured push destination.</h2><p><a class="link"   href="https://www.cnblogs.com/nayek/p/12238801.html" >参考<i class="fas fa-external-link-alt"></i></a></p>
<p>在git仓库创建新的仓库然后复制仓库URL链接：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote add origin [https:*//github.com/xxxxx/xxxxx.git*](https://github.com/xxxxx/xxxxx.git) </span><br><span class="line"></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

<h2 id="unable-to-get-local-issuer-certificate"><a href="#unable-to-get-local-issuer-certificate" class="headerlink" title="unable to get local issuer certificate"></a>unable to get local issuer certificate</h2><p>这个是由于Git默认开启了<a class="link"   href="https://so.csdn.net/so/search?q=SSL&spm=1001.2101.3001.7020" >SSL<i class="fas fa-external-link-alt"></i></a>验证，关闭即可；</p>
<p>解决方式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git config --<span class="variable language_">global</span> http.<span class="property">sslVerify</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>执行以上git命令，关闭ssl验证。</p>
<h2 id="git-branch-不显示的原因"><a href="#git-branch-不显示的原因" class="headerlink" title="git branch 不显示的原因"></a>git branch 不显示的原因</h2><p><a class="link"   href="https://blog.csdn.net/angduozu7316/article/details/101489304?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_paycolumn_v3&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_paycolumn_v3&amp;utm_relevant_index=2" >参考<i class="fas fa-external-link-alt"></i></a></p>
<p>必须使用git init命令创建仓库，执行git add . 和git <a class="link"   href="https://so.csdn.net/so/search?q=commit&spm=1001.2101.3001.7020" >commit<i class="fas fa-external-link-alt"></i></a>（提交成功后）,再使用git branch命令，才显示出本地分支。</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>本地项目同步到Github</title>
    <url>/2022/04/17/Git/%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E5%90%8C%E6%AD%A5%E5%88%B0Github/</url>
    <content><![CDATA[<h1 id="本地项目同步到Github"><a href="#本地项目同步到Github" class="headerlink" title="本地项目同步到Github"></a>本地项目同步到Github</h1><h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><p>首先在本地安装<a class="link"   href="https://git-scm.com/downloads" >git<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="建立Github仓库"><a href="#建立Github仓库" class="headerlink" title="建立Github仓库"></a>建立Github仓库</h2><p>复制地址（http连接）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/用户名/仓库名.git</span><br></pre></td></tr></table></figure>



<h2 id="生成SSH-key"><a href="#生成SSH-key" class="headerlink" title="生成SSH key"></a>生成SSH key</h2><p>生成密钥（Git Bash中操作）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;邮箱&quot;</span></span><br><span class="line"><span class="comment">//接下来直接全部回车</span></span><br></pre></td></tr></table></figure>

<p>将生成密钥：id_rsa.pud 中的密钥设置到github中</p>
<p>将密钥写入key中，title可以不用写，只是一个标题</p>
<h2 id="配置登录信息"><a href="#配置登录信息" class="headerlink" title="配置登录信息"></a>配置登录信息</h2><p>同步信息</p>
<blockquote>
<p>将自己在Github上的注册的用户名和邮箱写入本地git的配置文件中</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.email &quot;zvozve@gmail.com&quot;</span><br><span class="line">git config --global user.name &quot;ZvoZve&quot;</span><br></pre></td></tr></table></figure>

<p>连接远程仓库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/用户名/仓库名.git</span><br></pre></td></tr></table></figure>

<h2 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h2><p>初始化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<p>将工作区文件提交到缓存区中</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">git status <span class="comment">//查看有多少文件未提交到仓库中</span></span><br><span class="line">git add . </span><br><span class="line">git status</span><br><span class="line">git commit -m ‘提交描述’</span><br><span class="line">git push --<span class="built_in">set</span>-upstream origin master <span class="comment">//初次配置</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

<p>推送到Github</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo</title>
    <url>/2022/04/17/Hexo/Hexo/</url>
    <content><![CDATA[<h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><blockquote>
<p>zvozve.github.io</p>
</blockquote>
<h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><p>安装git node.js</p>
<p>安装hexo</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<p>验证软件版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git --version</span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<h2 id="本地部署"><a href="#本地部署" class="headerlink" title="本地部署"></a>本地部署</h2><p>初始化Hexo文件夹（选择空文件夹）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<p>安装npm</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>安装插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>开启本地访问（<a href="http://localhost:4000）">http://localhost:4000）</a></p>
<p>ctrl c退出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<h2 id="同步到Github"><a href="#同步到Github" class="headerlink" title="同步到Github"></a>同步到Github</h2><p>修改根目录下_config.yal文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: </span><br><span class="line">        repository: https://github.com/ZvoZve/zvozve.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>登录信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.email &quot;zvozve@gmail.com&quot;</span><br><span class="line">git config --global user.name &quot;ZvoZve&quot;</span><br></pre></td></tr></table></figure>

<p>推送到github</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>

<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><blockquote>
<p><a class="link"   href="http://www.hexo.io/" >hexo主题<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://keep-docs.xpoet.cn/usage-tutorial/configuration-guide.html#menu" >主题”keep”配置<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<p>克隆主题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/sanjinhub/hexo-theme-geek.git geek </span><br></pre></td></tr></table></figure>

<p>修改_config.yal文件中使用的主题名</p>
<p>删除.deploy_git文件夹和public文件夹</p>
<p>执行以下代码刷新</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<p>重新生成index</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-generator-index --save</span><br></pre></td></tr></table></figure>

<h2 id="新建目录"><a href="#新建目录" class="headerlink" title="新建目录"></a>新建目录</h2><p>Hexo 项目并没有 categories（分类）、tags（标签）、about（关于）、links（友链）等页面，需要自己手动创建。创建「 about（关于）」页面，在 Hexo 项目根目录下执行命令，即可在 <code>source</code> 目录下生成 about 文件夹。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure>

<h1 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h1><h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><p>格式（Hexo根目录/Sourse/文件夹下）</p>
<p>分类文件夹/自定义文件夹/文件名 “标题名”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page --path _posts/Hexo/hexo建站 &quot;Hexo建站&quot;</span><br></pre></td></tr></table></figure>

<h1 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h1><p>参考：<a class="link"   href="https://jinzequn.github.io/2018/01/24/github-hexo/" >blog+github备份和恢复<i class="fas fa-external-link-alt"></i></a></p>
<ol>
<li><p>创建新分支，命名为：hexo</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -b hexo</span><br></pre></td></tr></table></figure></li>
<li><p>对于日常修改博客的时候，应该首先用将内容保存至github中，然后再部署博客</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add . </span><br><span class="line">git commit -m “…”</span><br><span class="line">git push origin hexo　</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h1><ol>
<li><p>将仓库克隆到本地</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone -b hexo [git@github.com](mailto:git@github.com): …</span><br></pre></td></tr></table></figure></li>
<li><p>然后在文件夹下执行 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo </span><br><span class="line">npm install </span><br><span class="line">npm install hexo-deployer-git </span><br><span class="line">(不需要hexo init)</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Java笔记</title>
    <url>/2022/03/19/Java/Java%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HelloWorld&quot;</span>); <span class="comment">//单行注释</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>固态硬盘</title>
    <url>/2022/04/17/Hardware/%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98/</url>
    <content><![CDATA[<h1 id="固态硬盘"><a href="#固态硬盘" class="headerlink" title="固态硬盘"></a>固态硬盘</h1><h2 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h2><h3 id="主控固件"><a href="#主控固件" class="headerlink" title="主控固件"></a>主控固件</h3><h3 id="闪存颗粒"><a href="#闪存颗粒" class="headerlink" title="闪存颗粒"></a>闪存颗粒</h3><p>SLC颗粒&gt;MLC颗粒&gt;TLC颗粒&gt; QLC颗粒</p>
<p>原片：通过严格检测，品质最佳，价格贵，有原厂标识，一般用于中高端产品<br>白片：品质次一档的颗粒，价格稍低，能正常使用，一般用于中低端产品<br>黑片：偷偷流出的残次品颗粒，价格低廉，不能正常使用，寿命极短，杂牌固态和U盘用</p>
<h3 id="外置缓存（部分硬盘）"><a href="#外置缓存（部分硬盘）" class="headerlink" title="外置缓存（部分硬盘）"></a>外置缓存（部分硬盘）</h3><h4 id="DRAM外置缓存"><a href="#DRAM外置缓存" class="headerlink" title="DRAM外置缓存:"></a>DRAM外置缓存:</h4><p>外置的缓存方案，实际上就是内存颗粒，起到缓冲作用，有利于提高硬盘速度的稳定性，成本会更高。</p>
<h4 id="无外置缓存："><a href="#无外置缓存：" class="headerlink" title="无外置缓存："></a>无外置缓存：</h4><p>此方案就拿出一部分闪存颗粒进行SLC模拟，很多坏坏的固态都已经学会借电脑内存缓存了，有利于有降低成本。<br>但很多不靠谱的无外置缓存的硬盘也会出现，大文件写入到一半的时候，速度突然大跌的问题，硬盘容量快存满的时候也可能速度大跌。</p>
<h2 id="传输"><a href="#传输" class="headerlink" title="传输"></a>传输</h2><table>
<thead>
<tr>
<th></th>
<th>说明</th>
<th>分类</th>
</tr>
</thead>
<tbody><tr>
<td>协议</td>
<td>数据传输的标准，是数据传递双方共同遵循的一种规定，准则。</td>
<td>NVME协议（快）<br />AHCI协议</td>
</tr>
<tr>
<td>总线</td>
<td>总线通道就是电脑各元器件之间的通道，这里具体指硬盘和CPU内存之间的通道，这个决定了硬盘速度的上限。</td>
<td>PCIE总线（快）<br />SATA总线</td>
</tr>
<tr>
<td>接口</td>
<td>物理层面的接口和手机的充电数据传输接口</td>
<td>PCIE接口<br/>M2接口<br/>SATA接口</td>
</tr>
</tbody></table>
<h2 id="产品"><a href="#产品" class="headerlink" title="产品"></a>产品</h2><h3 id="外观"><a href="#外观" class="headerlink" title="外观"></a>外观</h3><p>M2固态</p>
<p>SATA固态</p>
<h3 id="长度（M2）"><a href="#长度（M2）" class="headerlink" title="长度（M2）"></a>长度（M2）</h3><p>2242<br>2260<br>2280（常见）<br>22110</p>
<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>M Key接口的高端固态硬盘，走PCI—E X4通道；</p>
<p>B&amp;M Key接口的固态硬盘,走PCI-E X2通道;</p>
<p>B&amp;M Key接口的固态硬盘，走SATA通道</p>
<p>B key:接口的固态硬盘,走SATA道通（已被淘汰）</p>
]]></content>
      <categories>
        <category>Hardware</category>
      </categories>
  </entry>
  <entry>
    <title>解除文件锁定</title>
    <url>/2022/04/17/macOS/%E8%A7%A3%E9%99%A4%E6%96%87%E4%BB%B6%E9%94%81%E5%AE%9A/</url>
    <content><![CDATA[<h1 id="解除文件锁定"><a href="#解除文件锁定" class="headerlink" title="解除文件锁定"></a>解除文件锁定</h1><p>定位至需要操作的文件所在文件夹</p>
<p>终端内输入</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">chflags <span class="operator">-</span><span class="type">R</span> nouchg <span class="operator">/</span>文件夹路径</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>macOS</category>
      </categories>
      <tags>
        <tag>macOS</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL配置</title>
    <url>/2022/03/19/MySQL/MySQL%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>目录：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd D:\Applications\mysql-8.0.22\bin</span><br></pre></td></tr></table></figure>

<p>安装mysql：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqld install</span><br></pre></td></tr></table></figure>

<p>安装pymysql：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install pymysql</span><br></pre></td></tr></table></figure>

<p>开机：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net start mysql</span><br></pre></td></tr></table></figure>

<p>关机：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net stop mysql</span><br></pre></td></tr></table></figure>

<p>登录：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>

<p>初始密码：   </p>
<p>重置密码：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use mysql;  </span><br><span class="line">UPDATE user SET Password=PASSWORD(&#x27;123456&#x27;) where USER=&#x27;root&#x27;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line">quit</span><br><span class="line"></span><br><span class="line">mysql&gt; SET PASSWORD = PASSWORD(&#x27;123456&#x27;);</span><br><span class="line"></span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Python小程序</title>
    <url>/2022/03/19/Python/Python%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<h2 id="回文年"><a href="#回文年" class="headerlink" title="回文年"></a>回文年</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">sdate = datetime.datetime.strptime(<span class="string">&#x27;2021.12.1&#x27;</span>,<span class="string">&#x27;%Y.%m.%d&#x27;</span>) </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100000</span>):</span><br><span class="line">    delta1 = datetime.timedelta (days=i) </span><br><span class="line">    edate = sdate + delta1</span><br><span class="line">    curYear = <span class="built_in">int</span>(edate.strftime(<span class="string">&quot;%Y&quot;</span>))</span><br><span class="line">    curMon = <span class="built_in">int</span>(edate.strftime(<span class="string">&quot;%m&quot;</span>))</span><br><span class="line">    curDay = <span class="built_in">int</span>(edate.strftime(<span class="string">&quot;%d&quot;</span>))</span><br><span class="line">    firLoc = <span class="built_in">int</span>(curDay % <span class="number">10</span>) * <span class="number">1000</span></span><br><span class="line">    secLoc = <span class="built_in">int</span>(curDay / <span class="number">10</span>) * <span class="number">100</span></span><br><span class="line">    thrLoc = <span class="built_in">int</span>(curMon % <span class="number">10</span>) * <span class="number">10</span></span><br><span class="line">    ForLoc = <span class="built_in">int</span>(curMon / <span class="number">10</span>)</span><br><span class="line">    newYear = <span class="built_in">int</span>(firLoc + secLoc + thrLoc + ForLoc)</span><br><span class="line">    <span class="comment">#print (i)</span></span><br><span class="line">    <span class="comment">#print (curYear)</span></span><br><span class="line">    <span class="comment">#print (curMon)</span></span><br><span class="line">    <span class="comment">#print (curDay)</span></span><br><span class="line">    <span class="comment">#print (newYear)</span></span><br><span class="line">    <span class="keyword">if</span> (newYear == curYear):</span><br><span class="line">        <span class="built_in">print</span> (edate)</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="小猪佩奇"><a href="#小猪佩奇" class="headerlink" title="小猪佩奇"></a>小猪佩奇</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> turtle <span class="keyword">as</span> t</span><br><span class="line"> </span><br><span class="line">t.screensize(<span class="number">400</span>, <span class="number">300</span>, <span class="string">&quot;blue&quot;</span>)</span><br><span class="line">t.pensize(<span class="number">4</span>) <span class="comment"># 设置画笔的大小</span></span><br><span class="line">t.colormode(<span class="number">255</span>) <span class="comment"># 设置GBK颜色范围为0-255</span></span><br><span class="line">t.color((<span class="number">255</span>,<span class="number">155</span>,<span class="number">192</span>),<span class="string">&quot;pink&quot;</span>) <span class="comment"># 设置画笔颜色和填充颜色(pink)</span></span><br><span class="line">t.setup(<span class="number">840</span>,<span class="number">500</span>) <span class="comment"># 设置主窗口的大小为840*500</span></span><br><span class="line">t.speed(<span class="number">10</span>) <span class="comment"># 设置画笔速度为10</span></span><br><span class="line"><span class="comment">#鼻子</span></span><br><span class="line">t.pu() <span class="comment"># 提笔</span></span><br><span class="line">t.goto(-<span class="number">100</span>,<span class="number">100</span>) <span class="comment"># 画笔前往坐标(-100,100)</span></span><br><span class="line">t.pd() <span class="comment"># 下笔</span></span><br><span class="line">t.seth(-<span class="number">30</span>) <span class="comment"># 笔的角度为-30°</span></span><br><span class="line">t.begin_fill() <span class="comment"># 外形填充的开始标志</span></span><br><span class="line">a=<span class="number">0.4</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">120</span>):</span><br><span class="line">   <span class="keyword">if</span> <span class="number">0</span>&lt;=i&lt;<span class="number">30</span> <span class="keyword">or</span> <span class="number">60</span>&lt;=i&lt;<span class="number">90</span>:</span><br><span class="line">       a=a+<span class="number">0.08</span></span><br><span class="line">       t.lt(<span class="number">3</span>) <span class="comment">#向左转3度</span></span><br><span class="line">       t.fd(a) <span class="comment">#向前走a的步长</span></span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">       a=a-<span class="number">0.08</span></span><br><span class="line">       t.lt(<span class="number">3</span>)</span><br><span class="line">       t.fd(a)</span><br><span class="line">t.end_fill() <span class="comment"># 依据轮廓填充</span></span><br><span class="line">t.pu() <span class="comment"># 提笔</span></span><br><span class="line">t.seth(<span class="number">90</span>) <span class="comment"># 笔的角度为90度</span></span><br><span class="line">t.fd(<span class="number">25</span>) <span class="comment"># 向前移动25</span></span><br><span class="line">t.seth(<span class="number">0</span>) <span class="comment"># 转换画笔的角度为0</span></span><br><span class="line">t.fd(<span class="number">10</span>)</span><br><span class="line">t.pd()</span><br><span class="line">t.pencolor(<span class="number">255</span>,<span class="number">155</span>,<span class="number">192</span>) <span class="comment"># 设置画笔颜色</span></span><br><span class="line">t.seth(<span class="number">10</span>)</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.circle(<span class="number">5</span>) <span class="comment"># 画一个半径为5的圆</span></span><br><span class="line">t.color(<span class="number">160</span>,<span class="number">82</span>,<span class="number">45</span>) <span class="comment"># 设置画笔和填充颜色</span></span><br><span class="line">t.end_fill()</span><br><span class="line">t.pu()</span><br><span class="line">t.seth(<span class="number">0</span>)</span><br><span class="line">t.fd(<span class="number">20</span>)</span><br><span class="line">t.pd()</span><br><span class="line">t.pencolor(<span class="number">255</span>,<span class="number">155</span>,<span class="number">192</span>)</span><br><span class="line">t.seth(<span class="number">10</span>)</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.circle(<span class="number">5</span>)</span><br><span class="line">t.color(<span class="number">160</span>,<span class="number">82</span>,<span class="number">45</span>)</span><br><span class="line">t.end_fill()</span><br><span class="line"><span class="comment">#头</span></span><br><span class="line">t.color((<span class="number">255</span>,<span class="number">155</span>,<span class="number">192</span>),<span class="string">&quot;pink&quot;</span>)</span><br><span class="line">t.pu()</span><br><span class="line">t.seth(<span class="number">90</span>)</span><br><span class="line">t.fd(<span class="number">41</span>)</span><br><span class="line">t.seth(<span class="number">0</span>)</span><br><span class="line">t.fd(<span class="number">0</span>)</span><br><span class="line">t.pd()</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.seth(<span class="number">180</span>)</span><br><span class="line">t.circle(<span class="number">300</span>,-<span class="number">30</span>) <span class="comment"># 顺时针画一个半径为300,圆心角为30°的园</span></span><br><span class="line">t.circle(<span class="number">100</span>,-<span class="number">60</span>)</span><br><span class="line">t.circle(<span class="number">80</span>,-<span class="number">100</span>)</span><br><span class="line">t.circle(<span class="number">150</span>,-<span class="number">20</span>)</span><br><span class="line">t.circle(<span class="number">60</span>,-<span class="number">95</span>)</span><br><span class="line">t.seth(<span class="number">161</span>)</span><br><span class="line">t.circle(-<span class="number">300</span>,<span class="number">15</span>)</span><br><span class="line">t.pu()</span><br><span class="line">t.goto(-<span class="number">100</span>,<span class="number">100</span>)</span><br><span class="line">t.pd()</span><br><span class="line">t.seth(-<span class="number">30</span>)</span><br><span class="line">a=<span class="number">0.4</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">60</span>):</span><br><span class="line">   <span class="keyword">if</span> <span class="number">0</span>&lt;=i&lt;<span class="number">30</span> <span class="keyword">or</span> <span class="number">60</span>&lt;=i&lt;<span class="number">90</span>:</span><br><span class="line">       a=a+<span class="number">0.08</span></span><br><span class="line">       t.lt(<span class="number">3</span>) <span class="comment">#向左转3度</span></span><br><span class="line">       t.fd(a) <span class="comment">#向前走a的步长</span></span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">       a=a-<span class="number">0.08</span></span><br><span class="line">       t.lt(<span class="number">3</span>)</span><br><span class="line">       t.fd(a)</span><br><span class="line">t.end_fill()</span><br><span class="line"><span class="comment">#耳朵</span></span><br><span class="line">t.color((<span class="number">255</span>,<span class="number">155</span>,<span class="number">192</span>),<span class="string">&quot;pink&quot;</span>)</span><br><span class="line">t.pu()</span><br><span class="line">t.seth(<span class="number">90</span>)</span><br><span class="line">t.fd(-<span class="number">7</span>)</span><br><span class="line">t.seth(<span class="number">0</span>)</span><br><span class="line">t.fd(<span class="number">70</span>)</span><br><span class="line">t.pd()</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.seth(<span class="number">100</span>)</span><br><span class="line">t.circle(-<span class="number">50</span>,<span class="number">50</span>)</span><br><span class="line">t.circle(-<span class="number">10</span>,<span class="number">120</span>)</span><br><span class="line">t.circle(-<span class="number">50</span>,<span class="number">54</span>)</span><br><span class="line">t.end_fill()</span><br><span class="line">t.pu()</span><br><span class="line">t.seth(<span class="number">90</span>)</span><br><span class="line">t.fd(-<span class="number">12</span>)</span><br><span class="line">t.seth(<span class="number">0</span>)</span><br><span class="line">t.fd(<span class="number">30</span>)</span><br><span class="line">t.pd()</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.seth(<span class="number">100</span>)</span><br><span class="line">t.circle(-<span class="number">50</span>,<span class="number">50</span>)</span><br><span class="line">t.circle(-<span class="number">10</span>,<span class="number">120</span>)</span><br><span class="line">t.circle(-<span class="number">50</span>,<span class="number">56</span>)</span><br><span class="line">t.end_fill()</span><br><span class="line"><span class="comment">#眼睛</span></span><br><span class="line">t.color((<span class="number">255</span>,<span class="number">155</span>,<span class="number">192</span>),<span class="string">&quot;white&quot;</span>)</span><br><span class="line">t.pu()</span><br><span class="line">t.seth(<span class="number">90</span>)</span><br><span class="line">t.fd(-<span class="number">20</span>)</span><br><span class="line">t.seth(<span class="number">0</span>)</span><br><span class="line">t.fd(-<span class="number">95</span>)</span><br><span class="line">t.pd()</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.circle(<span class="number">15</span>)</span><br><span class="line">t.end_fill()</span><br><span class="line">t.color(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">t.pu()</span><br><span class="line">t.seth(<span class="number">90</span>)</span><br><span class="line">t.fd(<span class="number">12</span>)</span><br><span class="line">t.seth(<span class="number">0</span>)</span><br><span class="line">t.fd(-<span class="number">3</span>)</span><br><span class="line">t.pd()</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.circle(<span class="number">3</span>)</span><br><span class="line">t.end_fill()</span><br><span class="line">t.color((<span class="number">255</span>,<span class="number">155</span>,<span class="number">192</span>),<span class="string">&quot;white&quot;</span>)</span><br><span class="line">t.pu()</span><br><span class="line">t.seth(<span class="number">90</span>)</span><br><span class="line">t.fd(-<span class="number">25</span>)</span><br><span class="line">t.seth(<span class="number">0</span>)</span><br><span class="line">t.fd(<span class="number">40</span>)</span><br><span class="line">t.pd()</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.circle(<span class="number">15</span>)</span><br><span class="line">t.end_fill()</span><br><span class="line">t.color(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">t.pu()</span><br><span class="line">t.seth(<span class="number">90</span>)</span><br><span class="line">t.fd(<span class="number">12</span>)</span><br><span class="line">t.seth(<span class="number">0</span>)</span><br><span class="line">t.fd(-<span class="number">3</span>)</span><br><span class="line">t.pd()</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.circle(<span class="number">3</span>)</span><br><span class="line">t.end_fill()</span><br><span class="line"><span class="comment">#腮</span></span><br><span class="line">t.color((<span class="number">255</span>,<span class="number">155</span>,<span class="number">192</span>))</span><br><span class="line">t.pu()</span><br><span class="line">t.seth(<span class="number">90</span>)</span><br><span class="line">t.fd(-<span class="number">95</span>)</span><br><span class="line">t.seth(<span class="number">0</span>)</span><br><span class="line">t.fd(<span class="number">65</span>)</span><br><span class="line">t.pd()</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.circle(<span class="number">30</span>)</span><br><span class="line">t.end_fill()</span><br><span class="line"><span class="comment">#嘴</span></span><br><span class="line">t.color(<span class="number">239</span>,<span class="number">69</span>,<span class="number">19</span>)</span><br><span class="line">t.pu()</span><br><span class="line">t.seth(<span class="number">90</span>)</span><br><span class="line">t.fd(<span class="number">15</span>)</span><br><span class="line">t.seth(<span class="number">0</span>)</span><br><span class="line">t.fd(-<span class="number">100</span>)</span><br><span class="line">t.pd()</span><br><span class="line">t.seth(-<span class="number">80</span>)</span><br><span class="line">t.circle(<span class="number">30</span>,<span class="number">40</span>)</span><br><span class="line">t.circle(<span class="number">40</span>,<span class="number">80</span>)</span><br><span class="line"><span class="comment">#身体</span></span><br><span class="line">t.color(<span class="string">&quot;red&quot;</span>,(<span class="number">255</span>,<span class="number">99</span>,<span class="number">71</span>))</span><br><span class="line">t.pu()</span><br><span class="line">t.seth(<span class="number">90</span>)</span><br><span class="line">t.fd(-<span class="number">20</span>)</span><br><span class="line">t.seth(<span class="number">0</span>)</span><br><span class="line">t.fd(-<span class="number">78</span>)</span><br><span class="line">t.pd()</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.seth(-<span class="number">130</span>)</span><br><span class="line">t.circle(<span class="number">100</span>,<span class="number">10</span>)</span><br><span class="line">t.circle(<span class="number">300</span>,<span class="number">30</span>)</span><br><span class="line">t.seth(<span class="number">0</span>)</span><br><span class="line">t.fd(<span class="number">230</span>)</span><br><span class="line">t.seth(<span class="number">90</span>)</span><br><span class="line">t.circle(<span class="number">300</span>,<span class="number">30</span>)</span><br><span class="line">t.circle(<span class="number">100</span>,<span class="number">3</span>)</span><br><span class="line">t.color((<span class="number">255</span>,<span class="number">155</span>,<span class="number">192</span>),(<span class="number">255</span>,<span class="number">100</span>,<span class="number">100</span>))</span><br><span class="line">t.seth(-<span class="number">135</span>)</span><br><span class="line">t.circle(-<span class="number">80</span>,<span class="number">63</span>)</span><br><span class="line">t.circle(-<span class="number">150</span>,<span class="number">24</span>)</span><br><span class="line">t.end_fill()</span><br><span class="line"><span class="comment">#手</span></span><br><span class="line">t.color((<span class="number">255</span>,<span class="number">155</span>,<span class="number">192</span>))</span><br><span class="line">t.pu()</span><br><span class="line">t.seth(<span class="number">90</span>)</span><br><span class="line">t.fd(-<span class="number">40</span>)</span><br><span class="line">t.seth(<span class="number">0</span>)</span><br><span class="line">t.fd(-<span class="number">27</span>)</span><br><span class="line">t.pd()</span><br><span class="line">t.seth(-<span class="number">160</span>)</span><br><span class="line">t.circle(<span class="number">300</span>,<span class="number">15</span>)</span><br><span class="line">t.pu()</span><br><span class="line">t.seth(<span class="number">90</span>)</span><br><span class="line">t.fd(<span class="number">15</span>)</span><br><span class="line">t.seth(<span class="number">0</span>)</span><br><span class="line">t.fd(<span class="number">0</span>)</span><br><span class="line">t.pd()</span><br><span class="line">t.seth(-<span class="number">10</span>)</span><br><span class="line">t.circle(-<span class="number">20</span>,<span class="number">90</span>)</span><br><span class="line">t.pu()</span><br><span class="line">t.seth(<span class="number">90</span>)</span><br><span class="line">t.fd(<span class="number">30</span>)</span><br><span class="line">t.seth(<span class="number">0</span>)</span><br><span class="line">t.fd(<span class="number">237</span>)</span><br><span class="line">t.pd()</span><br><span class="line">t.seth(-<span class="number">20</span>)</span><br><span class="line">t.circle(-<span class="number">300</span>,<span class="number">15</span>)</span><br><span class="line">t.pu()</span><br><span class="line">t.seth(<span class="number">90</span>)</span><br><span class="line">t.fd(<span class="number">20</span>)</span><br><span class="line">t.seth(<span class="number">0</span>)</span><br><span class="line">t.fd(<span class="number">0</span>)</span><br><span class="line">t.pd()</span><br><span class="line">t.seth(-<span class="number">170</span>)</span><br><span class="line">t.circle(<span class="number">20</span>,<span class="number">90</span>)</span><br><span class="line"><span class="comment">#脚</span></span><br><span class="line">t.pensize(<span class="number">10</span>)</span><br><span class="line">t.color((<span class="number">240</span>,<span class="number">128</span>,<span class="number">128</span>))</span><br><span class="line">t.pu()</span><br><span class="line">t.seth(<span class="number">90</span>)</span><br><span class="line">t.fd(-<span class="number">75</span>)</span><br><span class="line">t.seth(<span class="number">0</span>)</span><br><span class="line">t.fd(-<span class="number">180</span>)</span><br><span class="line">t.pd()</span><br><span class="line">t.seth(-<span class="number">90</span>)</span><br><span class="line">t.fd(<span class="number">40</span>)</span><br><span class="line">t.seth(-<span class="number">180</span>)</span><br><span class="line">t.color(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">t.pensize(<span class="number">15</span>)</span><br><span class="line">t.fd(<span class="number">20</span>)</span><br><span class="line">t.pensize(<span class="number">10</span>)</span><br><span class="line">t.color((<span class="number">240</span>,<span class="number">128</span>,<span class="number">128</span>))</span><br><span class="line">t.pu()</span><br><span class="line">t.seth(<span class="number">90</span>)</span><br><span class="line">t.fd(<span class="number">40</span>)</span><br><span class="line">t.seth(<span class="number">0</span>)</span><br><span class="line">t.fd(<span class="number">90</span>)</span><br><span class="line">t.pd()</span><br><span class="line">t.seth(-<span class="number">90</span>)</span><br><span class="line">t.fd(<span class="number">40</span>)</span><br><span class="line">t.seth(-<span class="number">180</span>)</span><br><span class="line">t.color(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">t.pensize(<span class="number">15</span>)</span><br><span class="line">t.fd(<span class="number">20</span>)</span><br><span class="line"><span class="comment">#尾巴</span></span><br><span class="line">t.pensize(<span class="number">4</span>)</span><br><span class="line">t.color((<span class="number">255</span>,<span class="number">155</span>,<span class="number">192</span>))</span><br><span class="line">t.pu()</span><br><span class="line">t.seth(<span class="number">90</span>)</span><br><span class="line">t.fd(<span class="number">70</span>)</span><br><span class="line">t.seth(<span class="number">0</span>)</span><br><span class="line">t.fd(<span class="number">95</span>)</span><br><span class="line">t.pd()</span><br><span class="line">t.seth(<span class="number">0</span>)</span><br><span class="line">t.circle(<span class="number">70</span>,<span class="number">20</span>)</span><br><span class="line">t.circle(<span class="number">10</span>,<span class="number">330</span>)</span><br><span class="line">t.circle(<span class="number">70</span>,<span class="number">30</span>)</span><br><span class="line">t.done()</span><br></pre></td></tr></table></figure>

<h2 id="二进制转十进制"><a href="#二进制转十进制" class="headerlink" title="二进制转十进制"></a>二进制转十进制</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 小数的二进制显示</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运算数（十进制）</span></span><br><span class="line">cntNum = <span class="number">0.114514</span></span><br><span class="line"><span class="comment"># 用于存储结果的数组初始化</span></span><br><span class="line">cont = &#123;&#125;</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="comment"># 程序主体</span></span><br><span class="line"><span class="keyword">while</span> cntNum != <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">if</span> cntNum &lt; <span class="number">1</span>:</span><br><span class="line">        cntNum = cntNum * <span class="number">2</span></span><br><span class="line">        cont[i] = <span class="string">&quot;0&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> cntNum &gt; <span class="number">1</span>:</span><br><span class="line">        cntNum = cntNum - <span class="number">1</span></span><br><span class="line">        cntNum = cntNum * <span class="number">2</span></span><br><span class="line">        cont[i] = <span class="string">&quot;1&quot;</span></span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    <span class="comment"># 打印过程数字</span></span><br><span class="line">    <span class="comment"># print(cntNum)</span></span><br><span class="line">cont[i] = <span class="string">&quot;1&quot;</span></span><br><span class="line">cont[<span class="number">0</span>] = <span class="string">&quot;0.&quot;</span></span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> cont:</span><br><span class="line">    <span class="built_in">print</span>(cont[i], end=<span class="string">&quot;&quot;</span>)  <span class="comment"># 同行显示</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="comment"># 打印小数位数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(cont)-<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h2 id="FileName2FileTime"><a href="#FileName2FileTime" class="headerlink" title="FileName2FileTime"></a>FileName2FileTime</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 读取文件名并以其命名</span></span><br><span class="line"><span class="comment"># 末尾添加4位随机字母防止重复</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> win32_setfiletime</span><br><span class="line"><span class="keyword">import</span> exifread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动补齐信息</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addInfo</span>(<span class="params">inputMainName</span>):</span><br><span class="line">    yearPart = <span class="built_in">chr</span>(<span class="number">0000</span>)</span><br><span class="line">    monPart = <span class="number">00</span></span><br><span class="line">    dayPart = <span class="number">00</span></span><br><span class="line">    <span class="keyword">if</span> <span class="number">13</span> == <span class="built_in">len</span>(inputMainName):</span><br><span class="line">        outputMainName = inputMainName[<span class="number">0</span>:<span class="number">10</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(inputMainName) &lt; <span class="number">13</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="number">8</span> &lt;= <span class="built_in">len</span>(inputMainName) &lt;= <span class="number">10</span>:</span><br><span class="line">                yearPart = inputMainName[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line">                monPart = inputMainName[<span class="number">4</span>:<span class="number">6</span>]</span><br><span class="line">                dayPart = inputMainName[<span class="number">6</span>:<span class="number">8</span>]</span><br><span class="line">            <span class="keyword">elif</span> <span class="number">6</span> &lt;= <span class="built_in">len</span>(inputMainName) &lt;= <span class="number">7</span>:</span><br><span class="line">                yearPart = inputMainName[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line">                monPart = inputMainName[<span class="number">4</span>:<span class="number">6</span>]</span><br><span class="line">                dayPart = <span class="string">&#x27;%02d&#x27;</span> % random.randint(<span class="number">1</span>, <span class="number">28</span>)</span><br><span class="line">            <span class="keyword">elif</span> <span class="number">4</span> == <span class="built_in">len</span>(inputMainName):</span><br><span class="line">                yearPart = inputMainName[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line">                monPart = <span class="string">&#x27;%02d&#x27;</span> % random.randint(<span class="number">1</span>, <span class="number">12</span>)</span><br><span class="line">                dayPart = <span class="string">&#x27;%02d&#x27;</span> % random.randint(<span class="number">1</span>, <span class="number">28</span>)</span><br><span class="line">            hourPart = <span class="string">&#x27;%02d&#x27;</span> % random.randint(<span class="number">1</span>, <span class="number">24</span>)</span><br><span class="line">            minPart = <span class="string">&#x27;%02d&#x27;</span> % random.randint(<span class="number">1</span>, <span class="number">60</span>)</span><br><span class="line">            secPart = <span class="string">&#x27;%02d&#x27;</span> % random.randint(<span class="number">1</span>, <span class="number">60</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            yearPart = inputMainName[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line">            monPart = inputMainName[<span class="number">4</span>:<span class="number">6</span>]</span><br><span class="line">            dayPart = inputMainName[<span class="number">6</span>:<span class="number">8</span>]</span><br><span class="line">            hourPart = inputMainName[<span class="number">9</span>:<span class="number">11</span>]</span><br><span class="line">            minPart = inputMainName[<span class="number">11</span>:<span class="number">13</span>]</span><br><span class="line">            secPart = inputMainName[<span class="number">13</span>:<span class="number">15</span>]</span><br><span class="line">        outputMainName = (yearPart + <span class="string">&#x27;-&#x27;</span> + monPart + <span class="string">&#x27;-&#x27;</span> + dayPart + <span class="string">&#x27; &#x27;</span> + hourPart + <span class="string">&#x27;:&#x27;</span> + minPart + <span class="string">&#x27;:&#x27;</span> + secPart)</span><br><span class="line">    <span class="keyword">return</span> outputMainName</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间戳转时间</span></span><br><span class="line"><span class="comment"># 正确10位长度的时间戳可精确到秒，11-14位长度则是包含了毫秒</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">intTodatetime</span>(<span class="params">intValue</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">str</span>(intValue)) == <span class="number">10</span>:</span><br><span class="line">        <span class="comment"># 精确到秒</span></span><br><span class="line">        timeValue = time.localtime(intValue)</span><br><span class="line">        tempDate = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, timeValue)</span><br><span class="line">        datetimeValue = datetime.datetime.strptime(tempDate, <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="number">10</span> &lt; <span class="built_in">len</span>(<span class="built_in">str</span>(intValue)) &lt; <span class="number">15</span>:</span><br><span class="line">        <span class="comment"># 精确到毫秒</span></span><br><span class="line">        k = <span class="built_in">len</span>(<span class="built_in">str</span>(intValue)) - <span class="number">10</span></span><br><span class="line">        timetamp = datetime.datetime.fromtimestamp(intValue / (<span class="number">1</span> * <span class="number">10</span> ** k))</span><br><span class="line">        datetimeValue = timetamp.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S.%f&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> datetimeValue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换字符</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">replaceChar</span>(<span class="params">inputFileName</span>):</span><br><span class="line">    outputFileName = re.sub(<span class="string">r&#x27;:&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="built_in">str</span>(inputFileName))  <span class="comment"># 时间串转字符串</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        outputFileName = re.sub(<span class="string">r&#x27;-&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="built_in">str</span>(outputFileName))  <span class="comment"># 时间串转字符串</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    outputFileName = re.sub(<span class="string">r&#x27; &#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="built_in">str</span>(outputFileName))  <span class="comment"># 时间串转字符串</span></span><br><span class="line">    <span class="keyword">return</span> outputFileName</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取文件创建时间并以其创建时间命名</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    loadPath = <span class="string">r&quot;C:\Users\ZOZE\Desktop\新建文件夹&quot;</span>  <span class="comment"># 文件夹目录</span></span><br><span class="line">    path = re.sub(<span class="string">r&quot;\\&quot;</span>, <span class="string">&quot;/&quot;</span>, <span class="built_in">str</span>(loadPath))  <span class="comment"># 时间串转字符串</span></span><br><span class="line">    files = os.listdir(path)  <span class="comment"># 得到文件夹下的所有文件名称</span></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files:  <span class="comment"># 遍历文件夹</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(file):  <span class="comment"># 判断是否是文件夹</span></span><br><span class="line">            oldFilePath = path + <span class="string">&#x27;/&#x27;</span> + file  <span class="comment"># 旧路径和文件</span></span><br><span class="line">            mainName = os.path.splitext(file)[<span class="number">0</span>]  <span class="comment"># 获取文件名</span></span><br><span class="line">            suffixName = os.path.splitext(file)[-<span class="number">1</span>]  <span class="comment"># 获取文件扩展名</span></span><br><span class="line">            newInfo = addInfo(mainName)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(newInfo) == <span class="number">10</span>:</span><br><span class="line">                timeStamp = <span class="built_in">float</span>(<span class="string">&quot;%.1f&quot;</span> % <span class="built_in">int</span>(newInfo))</span><br><span class="line">                timeStamp = timeStamp - <span class="number">102468214</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="built_in">type</span>(timeStamp))</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">format</span> = <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span></span><br><span class="line">                timeStamp = time.mktime(time.strptime(newInfo, <span class="built_in">format</span>))  <span class="comment"># 转为时间戳</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="built_in">type</span>(timeStamp))</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">            win32_setfiletime.setctime(oldFilePath, timeStamp)  <span class="comment"># 修改创建时间</span></span><br><span class="line">            win32_setfiletime.setmtime(oldFilePath, timeStamp)  <span class="comment"># 修改修改时间</span></span><br><span class="line">            <span class="comment"># win32_setfiletime.setatime(oldFilePath, timeStamp)  # 修改访问时间</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">            createTime = os.path.getctime(oldFilePath)  <span class="comment"># 获取时间戳</span></span><br><span class="line">            fileTime = intTodatetime(<span class="built_in">int</span>(createTime))  <span class="comment"># 将时间戳整形化，并转换为时间</span></span><br><span class="line"></span><br><span class="line">            newFileTime = replaceChar(fileTime)  <span class="comment"># 简化格式</span></span><br><span class="line"></span><br><span class="line">            randomNumberList = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(suffixName) &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">4</span>):</span><br><span class="line">                    randomNumber = <span class="built_in">chr</span>(random.randint(<span class="number">64</span> + <span class="number">1</span>, <span class="number">64</span> + <span class="number">26</span>))  <span class="comment"># 生成随机数</span></span><br><span class="line">                    randomNumberList = randomNumberList + randomNumber</span><br><span class="line">                newFilePath = path + <span class="string">&#x27;/&#x27;</span> + newFileTime + <span class="string">&#x27;-&#x27;</span> + randomNumberList + suffixName  <span class="comment"># 新路径和文件</span></span><br><span class="line">                os.rename(oldFilePath, newFilePath)  <span class="comment"># 替换文件名</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;success!&quot;</span>)</span><br><span class="line">            <span class="comment"># else:</span></span><br><span class="line">            <span class="comment"># realCreateTime = realCreateTime[0:8]</span></span><br><span class="line">            <span class="comment"># newFilePath = path + &#x27;/&#x27; + realCreateTime  # 新路径和文件</span></span><br></pre></td></tr></table></figure>

<h2 id="FileTime2FileName"><a href="#FileTime2FileName" class="headerlink" title="FileTime2FileName"></a>FileTime2FileName</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 读取文件创建时间并以其创建时间命名</span></span><br><span class="line"><span class="comment"># 末尾添加4位随机字母防止重复</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> exifread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间戳转时间</span></span><br><span class="line"><span class="comment"># 正确10位长度的时间戳可精确到秒，11-14位长度则是包含了毫秒</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">intTodatetime</span>(<span class="params">intValue</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">str</span>(intValue)) == <span class="number">10</span>:</span><br><span class="line">        <span class="comment"># 精确到秒</span></span><br><span class="line">        timeValue = time.localtime(intValue)</span><br><span class="line">        tempDate = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, timeValue)</span><br><span class="line">        datetimeValue = datetime.datetime.strptime(tempDate, <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="number">10</span> &lt; <span class="built_in">len</span>(<span class="built_in">str</span>(intValue)) &lt; <span class="number">15</span>:</span><br><span class="line">        <span class="comment"># 精确到毫秒</span></span><br><span class="line">        k = <span class="built_in">len</span>(<span class="built_in">str</span>(intValue)) - <span class="number">10</span></span><br><span class="line">        timetamp = datetime.datetime.fromtimestamp(intValue / (<span class="number">1</span> * <span class="number">10</span> ** k))</span><br><span class="line">        datetimeValue = timetamp.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S.%f&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> datetimeValue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换字符</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">replaceChar</span>(<span class="params">inputFileName</span>):</span><br><span class="line">    outputFileName = re.sub(<span class="string">r&#x27;:&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="built_in">str</span>(inputFileName))  <span class="comment"># 时间串转字符串</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        outputFileName = re.sub(<span class="string">r&#x27;-&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="built_in">str</span>(outputFileName))  <span class="comment"># 时间串转字符串</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    outputFileName = re.sub(<span class="string">r&#x27; &#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="built_in">str</span>(outputFileName))  <span class="comment"># 时间串转字符串</span></span><br><span class="line">    <span class="keyword">return</span> outputFileName</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取文件创建时间并以其创建时间命名</span></span><br><span class="line">loadPath = <span class="string">r&quot;C:\Users\ZOZE\Desktop\新建文件夹&quot;</span>  <span class="comment"># 文件夹目录</span></span><br><span class="line">path = re.sub(<span class="string">r&quot;\\&quot;</span>, <span class="string">&quot;/&quot;</span>, <span class="built_in">str</span>(loadPath))  <span class="comment"># 时间串转字符串</span></span><br><span class="line">files = os.listdir(path)  <span class="comment"># 得到文件夹下的所有文件名称</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> files:  <span class="comment"># 遍历文件夹</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(file):  <span class="comment"># 判断是否是文件夹</span></span><br><span class="line">        oldFilePath = path + <span class="string">&#x27;/&#x27;</span> + file  <span class="comment"># 旧路径和文件</span></span><br><span class="line">        suffixName = os.path.splitext(file)[-<span class="number">1</span>]  <span class="comment"># 获取文件扩展名</span></span><br><span class="line">        <span class="keyword">try</span>:  <span class="comment"># 尝试打开文件读取拍摄信息</span></span><br><span class="line">            openFile = <span class="built_in">open</span>(oldFilePath, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">            tags = exifread.process_file(openFile)</span><br><span class="line">            fileTime = tags[<span class="string">&#x27;EXIF DateTimeOriginal&#x27;</span>]  <span class="comment"># 获取拍摄时间</span></span><br><span class="line">            openFile.close()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;shot time&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span>:  <span class="comment"># 获取创建日期，不等于拍摄日期</span></span><br><span class="line">            createTime = os.path.getctime(oldFilePath)  <span class="comment"># 获取时间戳</span></span><br><span class="line">            fileTime = intTodatetime(<span class="built_in">int</span>(createTime))  <span class="comment"># 将时间戳整形化，并转换为时间</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;create time&quot;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            newFileTime = replaceChar(fileTime)  <span class="comment"># 简化格式</span></span><br><span class="line">            <span class="built_in">print</span>(newFileTime)</span><br><span class="line">            randomNumberList = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(suffixName) &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">4</span>):</span><br><span class="line">                    randomNumber = <span class="built_in">chr</span>(random.randint(<span class="number">64</span> + <span class="number">1</span>, <span class="number">64</span> + <span class="number">26</span>))  <span class="comment"># 生成随机数</span></span><br><span class="line">                    randomNumberList = randomNumberList + randomNumber</span><br><span class="line">                newFilePath = path + <span class="string">&#x27;/&#x27;</span> + newFileTime + <span class="string">&#x27;-&#x27;</span> + randomNumberList + suffixName  <span class="comment"># 新路径和文件</span></span><br><span class="line">                os.rename(oldFilePath, newFilePath)  <span class="comment"># 替换文件名</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;success!&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="comment"># else:</span></span><br><span class="line">        <span class="comment"># realCreateTime = realCreateTime[0:8]</span></span><br><span class="line">        <span class="comment"># newFilePath = path + &#x27;/&#x27; + realCreateTime  # 新路径和文件</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python笔记</title>
    <url>/2022/03/19/Python/Python%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>教程链接：<a class="link"   href="https://www.bilibili.com/video/BV1u741157TW?p=1" >https://www.bilibili.com/video/BV1u741157TW?p=1<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><h3 id="1-1单引号和双引号一样的"><a href="#1-1单引号和双引号一样的" class="headerlink" title="1.1单引号和双引号一样的"></a>1.1单引号和双引号一样的</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">Print(<span class="string">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="1-2三个单引号起换行效果"><a href="#1-2三个单引号起换行效果" class="headerlink" title="1.2三个单引号起换行效果"></a>1.2三个单引号起换行效果</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Print(<span class="string">&#x27;&#x27;&#x27;hello world</span></span><br><span class="line"><span class="string">hello world</span></span><br><span class="line"><span class="string">hello world</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># output</span></span><br><span class="line"><span class="comment"># hello world</span></span><br><span class="line"><span class="comment"># hello world</span></span><br><span class="line"><span class="comment"># hello world</span></span><br></pre></td></tr></table></figure>

<h3 id="1-3-注释"><a href="#1-3-注释" class="headerlink" title="1.3 注释"></a>1.3 注释</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注释</span></span><br><span class="line"><span class="comment"># Pycharm注释快捷键  ctrl+/</span></span><br></pre></td></tr></table></figure>

<h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><h3 id="2-1变量"><a href="#2-1变量" class="headerlink" title="2.1变量"></a>2.1变量</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = b = <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"> </span><br><span class="line">a=<span class="number">2</span>,b=<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>( <span class="string">&quot;a=&quot;</span>+<span class="built_in">str</span>(a))<span class="comment">#str强制类型转换</span></span><br><span class="line"><span class="built_in">print</span>( <span class="string">&quot;b=&quot;</span>+<span class="built_in">str</span>(b))</span><br><span class="line">greeting=<span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="built_in">print</span>(greeting)</span><br><span class="line">greeting=<span class="string">&quot;world&quot;</span></span><br><span class="line"><span class="built_in">print</span>(greeting)</span><br></pre></td></tr></table></figure>

<h3 id="2-2变量的命名规则"><a href="#2-2变量的命名规则" class="headerlink" title="2.2变量的命名规则"></a>2.2变量的命名规则</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以用数字字母下划线，不能以数字开头</span></span><br><span class="line"><span class="comment"># 关键字不能作为变量名字</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3数字类型int-float"><a href="#2-3数字类型int-float" class="headerlink" title="2.3数字类型int float"></a>2.3数字类型int float</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">在Python中，有两种主要的数字类型：</span></span><br><span class="line"><span class="string">整数和浮点数。</span></span><br><span class="line"><span class="string">它们之间最重要的区别是浮点数是具有小数点的数字，而int是没有小数点的数字。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">number = <span class="number">9</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(number))<span class="comment"># print type of variable &quot;number&quot;</span></span><br><span class="line">float_number = <span class="number">9.0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(float_number))</span><br><span class="line"><span class="built_in">print</span>( number+<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(float_number+<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h3 id="2-4数据类型转换int-float-str"><a href="#2-4数据类型转换int-float-str" class="headerlink" title="2.4数据类型转换int float str"></a>2.4数据类型转换int float str</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 有几个内置函数可让您将一种数据类型转换为另一种数据类型。</span></span><br><span class="line"><span class="comment"># 这些函数返回一个表示转换后值的新对象</span></span><br><span class="line"><span class="comment"># “ int（x）”将x转换为整数。</span></span><br><span class="line"><span class="comment"># “ float（x）”将x转换为浮点数。</span></span><br><span class="line"><span class="comment"># “ str（x）”将对象x转换为字符串表示形式。</span></span><br><span class="line">number =<span class="number">9</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(number))<span class="comment"># print type of variable &quot;number&quot;</span></span><br><span class="line"> </span><br><span class="line">float_number = <span class="number">9.0</span></span><br><span class="line"><span class="built_in">print</span>(float_number)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(float_number))</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过int(),float() , str()进行的转换成为显示类型转换</span></span><br><span class="line">age = <span class="string">&quot;10&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(age)+<span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line">street_no = 101address =<span class="string">&quot;北京西城&quot;</span></span><br><span class="line"><span class="built_in">print</span>(address+<span class="built_in">str</span>(street_no))</span><br><span class="line"> </span><br><span class="line"><span class="comment">#隐式类型转换</span></span><br><span class="line"><span class="built_in">float</span> _number = <span class="number">9.0</span><span class="built_in">print</span>(float_number+<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h3 id="2-5算式运算符"><a href="#2-5算式运算符" class="headerlink" title="2.5算式运算符 + - * / ** %"></a>2.5算式运算符 + - * / ** %</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">number = <span class="number">9.0</span> <span class="comment">#float number</span></span><br><span class="line"><span class="comment">#result =divide &#x27; number&#x27; by two#</span></span><br><span class="line"><span class="comment">#remainder = calculate the remainder#</span></span><br><span class="line"><span class="comment">#print( &quot; result =&quot; + str(result))</span></span><br><span class="line"><span class="comment">#print( &quot; remainder = &quot; + str( remainder))</span></span><br><span class="line"> </span><br><span class="line">result = number/<span class="number">2</span></span><br><span class="line">remainder = number % <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>( <span class="string">&quot;result =&quot;</span> + <span class="built_in">str</span>( result))</span><br><span class="line"><span class="built_in">print</span>( <span class="string">&quot; remainder =&quot;</span> + <span class="built_in">str</span>(remainder))</span><br><span class="line"> </span><br><span class="line">num =<span class="number">9</span></span><br><span class="line"><span class="built_in">print</span>(num/<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(num %<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(num**<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<h3 id="2-6赋值运算符"><a href="#2-6赋值运算符" class="headerlink" title="2.6赋值运算符+=  -=  *=  /="></a>2.6赋值运算符+=  -=  *=  /=</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">number = <span class="number">9.0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;number = &quot;</span> + <span class="built_in">str</span>(number))</span><br><span class="line"> </span><br><span class="line">number -= <span class="number">2</span></span><br><span class="line">number = number - <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(number)</span><br><span class="line"><span class="built_in">print</span>( <span class="string">&quot;number = &quot;</span> + <span class="built_in">str</span>(number))</span><br><span class="line"> </span><br><span class="line">number operator <span class="number">5</span></span><br><span class="line">number += <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>( <span class="string">&quot;number = &quot;</span> + <span class="built_in">str</span>(number))</span><br><span class="line"> </span><br><span class="line">Number *= <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(number)</span><br></pre></td></tr></table></figure>

<h3 id="2-7布尔运算符boolean-True-False"><a href="#2-7布尔运算符boolean-True-False" class="headerlink" title="2.7布尔运算符boolean True False == !="></a>2.7布尔运算符boolean True False == !=</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">two = <span class="number">2</span></span><br><span class="line">three = <span class="number">3</span></span><br><span class="line">is_equal = two == three</span><br><span class="line"><span class="built_in">print</span>( is_equal)</span><br><span class="line">is_equal = two != three</span><br><span class="line"><span class="built_in">print</span>( is_equal)</span><br></pre></td></tr></table></figure>

<h3 id="2-8比较运算符-gt-lt-gt-lt"><a href="#2-8比较运算符-gt-lt-gt-lt" class="headerlink" title="2.8比较运算符&gt;=  &lt;=  &gt;  &lt;"></a>2.8比较运算符&gt;=  &lt;=  &gt;  &lt;</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 返回值boolean值只有True False</span></span><br><span class="line"><span class="comment"># 返回结果只有True Fasle</span></span><br><span class="line"><span class="comment"># 比较运算符具有同样的优先级并且可以组成任意链&gt; &gt;   &lt; &lt;</span></span><br><span class="line"> </span><br><span class="line">one = <span class="number">1</span></span><br><span class="line">two = <span class="number">2</span></span><br><span class="line">three = <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(one &lt; two &lt; three)</span><br><span class="line">is_greater = three &gt; two</span><br><span class="line"><span class="built_in">print</span>(is_greater)</span><br><span class="line">flag = two &gt;= three</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><h3 id="3-1字符串连接"><a href="#3-1字符串连接" class="headerlink" title="3.1字符串连接"></a>3.1字符串连接</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hello = <span class="string">&quot;Hello&quot;</span></span><br><span class="line">world = <span class="string">&#x27;World&#x27;</span></span><br><span class="line">hello_world = hello+world</span><br><span class="line"><span class="built_in">print</span>(hello_world) <span class="comment">#Note: you should print &quot;Hello World&quot;</span></span><br><span class="line">number = <span class="number">9</span></span><br><span class="line"><span class="built_in">print</span>(hello+<span class="built_in">str</span>(number))</span><br><span class="line">hello_world = hello+<span class="string">&quot; &quot;</span>+world</span><br><span class="line"><span class="built_in">print</span>(hello_world)</span><br></pre></td></tr></table></figure>

<h3 id="3-2字符串乘法运算"><a href="#3-2字符串乘法运算" class="headerlink" title="3.2字符串乘法运算"></a>3.2字符串乘法运算</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hello = <span class="string">&quot;hello&quot;</span></span><br><span class="line">ten_of_hellos = hello *<span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(ten_of_hellos)</span><br><span class="line"><span class="comment">#output:</span></span><br><span class="line"><span class="comment">#hellohellohellohellohellohellohellohellohellohello</span></span><br><span class="line"></span><br><span class="line">star</span><br><span class="line">empty = <span class="string">&quot; &quot;</span></span><br><span class="line"><span class="built_in">print</span>(empty*<span class="number">3</span>+star)</span><br><span class="line"><span class="built_in">print</span>(empty*<span class="number">2</span>+star*<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(empty+star*<span class="number">5</span>)</span><br><span class="line"><span class="comment">#output:</span></span><br><span class="line"><span class="comment">#   *</span></span><br><span class="line"><span class="comment">#  ***</span></span><br><span class="line"><span class="comment"># *****</span></span><br></pre></td></tr></table></figure>

<h3 id="3-3-字符串索引"><a href="#3-3-字符串索引" class="headerlink" title="3.3 字符串索引"></a>3.3 字符串索引</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python= <span class="string">&quot;Python&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;h&quot;</span> + python[<span class="number">3</span>])</span><br><span class="line">p_letter = python[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span> (p_letter)</span><br><span class="line"><span class="comment">#output:</span></span><br><span class="line"><span class="comment">#h h</span></span><br><span class="line"><span class="comment">#p</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(python [<span class="number">51</span>])</span><br><span class="line"><span class="comment">#python中字符串索引可以是正数,也可以是负数</span></span><br><span class="line"><span class="built_in">print</span>(python [-<span class="number">1</span>])</span><br><span class="line"><span class="comment">#output:</span></span><br><span class="line"><span class="comment">#N</span></span><br><span class="line"><span class="comment">#N</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(python [<span class="number">51</span>])</span><br><span class="line"><span class="comment"># python中字符串索引可以是正数，如果索引是正数那么索引值从0开始，从前往后数</span></span><br><span class="line"><span class="comment">#也可以是负数，如果索引值是负数,索引值从-1开始,从后往前数</span></span><br><span class="line"><span class="built_in">print</span>(python [-<span class="number">6</span>])</span><br><span class="line"><span class="comment">#output:</span></span><br><span class="line"><span class="comment">#N</span></span><br><span class="line"><span class="comment">#p</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如何能够获得字符串中字符的索引值呢</span></span><br><span class="line"><span class="built_in">print</span>(python.index(<span class="string">&#x27;h&#x27;</span>))</span><br><span class="line"><span class="comment">#output:</span></span><br><span class="line"><span class="comment">#3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(python.index(<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line"><span class="comment">#报错</span></span><br></pre></td></tr></table></figure>

<h3 id="3-4字符串截取-默认从0开始，可以不写"><a href="#3-4字符串截取-默认从0开始，可以不写" class="headerlink" title="3.4字符串截取#默认从0开始，可以不写"></a>3.4字符串截取#默认从0开始，可以不写</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">monty_python = <span class="string">&quot;Monty Python&quot;</span></span><br><span class="line">monty = monty_python [:<span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(monty)</span><br><span class="line"><span class="comment">#output:</span></span><br><span class="line"><span class="comment"># Monty</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># #默认到结尾，可以不写</span></span><br><span class="line">python = monty_python [<span class="number">6</span>:]</span><br><span class="line"><span class="built_in">print</span>(python)</span><br><span class="line"><span class="comment">#output:</span></span><br><span class="line"><span class="comment"># Python</span></span><br><span class="line"><span class="comment"># #索引可以为负数</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-5字符串in操作符"><a href="#3-5字符串in操作符" class="headerlink" title="3.5字符串in操作符"></a>3.5字符串in操作符</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ice_cream = <span class="string">&quot;ice cream&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;cream&quot;</span> <span class="keyword">in</span> ice_cream)</span><br><span class="line"><span class="comment">#output:</span></span><br><span class="line"><span class="comment"># Ture</span></span><br><span class="line">contains = <span class="string">&quot;ice&quot;</span> <span class="keyword">in</span> ice_cream</span><br><span class="line"><span class="built_in">print</span>(contains)</span><br><span class="line"><span class="comment">#output:</span></span><br><span class="line"><span class="comment"># ture</span></span><br><span class="line">contains = <span class="string">&quot;ic e&quot;</span> <span class="keyword">in</span> ice_cream</span><br><span class="line"><span class="built_in">print</span>(contains)</span><br><span class="line"><span class="comment">#output:</span></span><br><span class="line"><span class="comment"># False</span></span><br><span class="line">contains = <span class="string">&quot;ic e&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> ice_cream</span><br><span class="line"><span class="built_in">print</span>(contains)</span><br><span class="line"><span class="comment">#output:</span></span><br><span class="line"><span class="comment"># Ture</span></span><br></pre></td></tr></table></figure>

<h3 id="3-6-len方法（统计字符串中的字符数）注意类型转换"><a href="#3-6-len方法（统计字符串中的字符数）注意类型转换" class="headerlink" title="3.6 len方法（统计字符串中的字符数）注意类型转换"></a>3.6 len方法（统计字符串中的字符数）注意类型转换</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#短语=这是一个非常长的字符串，用三引号引起来的字符串定义多行字符串</span></span><br><span class="line">phrase = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">It is a really long string</span></span><br><span class="line"><span class="string">triple-quoted strings are used </span></span><br><span class="line"><span class="string">to define multi-line strings</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#取出上半部分  全部  全部/2  [0:全部/2]</span></span><br><span class="line">first_half = phrase[<span class="number">0</span>:<span class="built_in">int</span>(<span class="built_in">len</span>(phrase)/<span class="number">2</span>)]</span><br><span class="line"><span class="built_in">print</span>(first_half)</span><br><span class="line"><span class="comment">#output:</span></span><br><span class="line"><span class="comment">#It is a really long string</span></span><br><span class="line"><span class="comment">#triple-quoted st</span></span><br><span class="line"><span class="built_in">print</span>( <span class="built_in">len</span>(phrase))</span><br><span class="line"><span class="comment">#output:</span></span><br><span class="line"><span class="comment"># 88</span></span><br></pre></td></tr></table></figure>

<h3 id="3-7转义字符"><a href="#3-7转义字符" class="headerlink" title="3.7转义字符"></a>3.7转义字符</h3><p>\“ \t \n</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span> </span><br><span class="line">Backslash is used to escape single or double quotation marks, for example &#x27;It\&#x27;s me&#x27; or &quot;She said \&quot;Hello\&quot;&quot;.</span><br><span class="line">The special symbol &#x27;\n&#x27; is used to add a line break to a string. </span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">Print out the following text using one string:<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">The name of this ice-cream is &quot;Sweeet&#x27;n&#x27;Tasty&quot; </span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My name is \&quot;Daniell&quot;</span><span class="string">&quot;)</span></span><br><span class="line"><span class="string">print(&quot;</span>hello world!\t\t\tI am coming<span class="string">&quot;) </span></span><br><span class="line"><span class="string">print(&quot;</span>hello world!AnI am coming<span class="string">&quot;)</span></span><br></pre></td></tr></table></figure>

<p>3.8 string内置函数</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span> </span><br><span class="line">There are a lot of useful string methods.</span><br><span class="line">You can use the &#x27;lower()&#x27; method to get rid of any capitalization in your strings.</span><br><span class="line">The &#x27;upper()&#x27; method is used to make a string uppercase. To call any string method, type a dot after the string (or a variable containing the string)</span><br><span class="line">and the method name after it, e.g. &quot;John&quot;.upper().</span><br><span class="line">In PyCharm, you can explore all available string methods by using Ctrl+Space after a dot.</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">Print monty_python in upper case. </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">monty_pytnon = <span class="string">&quot;Monty Python&quot;</span></span><br><span class="line"><span class="built_in">print</span>(monty_python)</span><br><span class="line"><span class="comment"># lower函数将字符串字符转换成小写</span></span><br><span class="line"><span class="built_in">print</span> (monty_python. lower())</span><br><span class="line"><span class="comment"># upper函数将字符串中字符转换成大写</span></span><br><span class="line"><span class="built_in">print</span> (monty_python.upper())</span><br><span class="line"><span class="comment"># print (upper cased monty_python) </span></span><br><span class="line"><span class="comment">#output:</span></span><br><span class="line"><span class="comment"># Monty Python</span></span><br><span class="line"><span class="comment"># monty python </span></span><br><span class="line"><span class="comment"># MONTY PYTHON</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># find函数 查找某个字符在字符串中的索引，如果没有返回—1</span></span><br><span class="line"><span class="built_in">print</span>(monty_python. find(<span class="string">&#x27;M&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(monty_python. find( <span class="string">&#x27;m&#x27;</span>))</span><br><span class="line"><span class="comment"># find函数在查找过程中返回的是查找字符串中第一个字符出现的索引</span></span><br><span class="line"><span class="built_in">print</span>(monty_python. find(<span class="string">&#x27;o&#x27;</span>))</span><br><span class="line"><span class="comment"># output:</span></span><br><span class="line"><span class="comment"># 0</span></span><br><span class="line"><span class="comment"># -1</span></span><br><span class="line"><span class="comment"># 1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># count函数，计算字符串中一个字符出现的次数</span></span><br><span class="line"><span class="built_in">print</span>(monty_python. count(<span class="string">&#x27;n&#x27;</span>))</span><br><span class="line"><span class="comment">#output: 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rfind 查找字符串中字符出现的最后一次位置索引</span></span><br><span class="line"><span class="built_in">print</span>(monty_python. count(<span class="string">&#x27;n&#x27;</span>))</span><br><span class="line"><span class="comment">#output: 11</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># replace 替换</span></span><br><span class="line"><span class="comment">#将o换成a</span></span><br><span class="line"><span class="built_in">print</span>(monty_python. replace(<span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;a&#x27;</span>)) </span><br><span class="line"></span><br><span class="line"><span class="comment"># split 字符串的分割</span></span><br><span class="line"><span class="built_in">print</span>(monty_python.split(<span class="string">&quot; &quot;</span>)) </span><br><span class="line">[<span class="string">&#x27;Monty&#x27;</span>, <span class="string">&#x27;Python&#x27;</span>]</span><br><span class="line"></span><br><span class="line">goods = <span class="string">&quot;apple, orange&quot;</span> </span><br><span class="line"><span class="built_in">print</span>(goods.split(<span class="string">&quot;,&quot;</span>)) </span><br><span class="line">[<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h3 id="3-9字符串格式化"><a href="#3-9字符串格式化" class="headerlink" title="3.9字符串格式化"></a>3.9字符串格式化</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">“%s” %变量名</span><br><span class="line">%d</span><br><span class="line">%f %<span class="number">.1</span>f</span><br><span class="line"><span class="built_in">format</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&quot;Daniel&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, PyCharm! My name is %s!&quot;</span> % name) </span><br><span class="line"><span class="comment">#output: Hello, PyCharm! My name is Daniel!</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">years = <span class="number">28</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;I&#x27;m special symbol years old %d&quot;</span> % years) </span><br><span class="line">price = <span class="number">2.4</span></span><br><span class="line"><span class="built_in">print</span>（“这个商品的价格为%<span class="number">.2</span>f元” % price）</span><br><span class="line"><span class="comment"># output: </span></span><br><span class="line"><span class="comment"># I&#x27;m special symbol years old 28 </span></span><br><span class="line"><span class="comment"># 这个商品的价格为2.40元</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[0) is [1) years old&quot;</span>. <span class="built_in">format</span> (<span class="string">&quot;Daniel&quot;</span>, <span class="number">28</span>)) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[name) is fage) years old&quot;</span>. <span class="built_in">format</span>(name=<span class="string">&quot;Daniel&quot;</span>, age=<span class="number">28</span>))</span><br><span class="line"><span class="comment"># output: </span></span><br><span class="line"><span class="comment"># Daniel is 28 years old</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 二进制，十进制，八进制，十六进制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[:b)&quot;</span>. <span class="built_in">format</span> (<span class="number">11</span>)) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[:d]&quot;</span>.<span class="built_in">format</span> (<span class="number">11</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[:o)&quot;</span>.<span class="built_in">format</span> (<span class="number">11</span>)) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[:x)&quot;</span>.<span class="built_in">format</span> (<span class="number">11</span>)) </span><br><span class="line"><span class="comment"># output: </span></span><br><span class="line"><span class="comment"># 1011</span></span><br><span class="line"><span class="comment"># 11 </span></span><br><span class="line"><span class="comment"># 13</span></span><br><span class="line"><span class="comment"># b</span></span><br></pre></td></tr></table></figure>

<h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><h3 id="4-1-list"><a href="#4-1-list" class="headerlink" title="4.1 list"></a>4.1 list</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span> </span><br><span class="line">A list is a data structure you can use to</span><br><span class="line">store a collection of different pieces of information under a single variable name.</span><br><span class="line">A list can be written as an array of comma-separated values (items) between square brackets, e.g. lst = [iteml, item2].</span><br><span class="line">Lists might contain items of different types,</span><br><span class="line">but usually all the items in the list ar of the same type. Like strings, lists can be indexed and sticed (see Lesson 3). </span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">Use list slicing to print [4, 9, 16]. </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">squares = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>] </span><br><span class="line"><span class="built_in">print</span>(squares)</span><br><span class="line"><span class="comment">#列表索引</span></span><br><span class="line"><span class="built_in">print</span>(squares [<span class="number">0</span>]) </span><br><span class="line"><span class="built_in">print</span>(squares [-<span class="number">2</span>]) </span><br><span class="line"><span class="built_in">print</span> (squares [:<span class="number">3</span>]) </span><br><span class="line"><span class="comment"># output: </span></span><br><span class="line"><span class="comment"># [1, 4, 9, 16, 25]</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 16</span></span><br><span class="line"><span class="comment"># [1, 4, 9]</span></span><br></pre></td></tr></table></figure>

<h3 id="4-2-list-操作-1"><a href="#4-2-list-操作-1" class="headerlink" title="4.2 list 操作 1"></a>4.2 list 操作 1</h3><p>列表项的追加 += append（）<br>修改列表项值 list[index] = new item</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">You can add new items at the end of the list, by using the append () method and concatenation.</span><br><span class="line">Unlike strings, lists are a mutable type, i.e.</span><br><span class="line">it is possible to change their content using lst [index]= new_item </span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">Replace &#x27;dino&#x27; with &quot;dinosaur&quot; in the &quot;animals&quot; list. </span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">animals = [<span class="string">&#x27;elephant&#x27;</span>, <span class="string">&#x27;lion&#x27;</span>, <span class="string">&#x27;tiger&#x27;</span>, <span class="string">&quot;giraffe&quot;</span>] <span class="comment"># create new list </span></span><br><span class="line"><span class="built_in">print</span> (animals)</span><br><span class="line"></span><br><span class="line">animals += [<span class="string">&quot;monkey&quot;</span>, <span class="string">&#x27;dog&#x27;</span>] <span class="comment"># add two items to the list </span></span><br><span class="line"><span class="built_in">print</span> (animals)</span><br><span class="line"></span><br><span class="line">animals.append (<span class="string">&quot;dino&quot;</span>) <span class="comment"># add one more item to the list using append() method </span></span><br><span class="line"><span class="built_in">print</span>(animals)</span><br><span class="line"></span><br><span class="line"><span class="comment"># replace &#x27;dino&#x27; with &#x27;dinosaur&#x27; </span></span><br><span class="line"><span class="comment"># print (animals)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (animals. index(<span class="string">&quot;dino&quot;</span>))</span><br><span class="line">animals [animals. index(<span class="string">&quot;dino&quot;</span>)] = <span class="string">&quot;dinosaur&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (animals)</span><br><span class="line"></span><br><span class="line"><span class="comment"># output: </span></span><br><span class="line"><span class="comment"># [&#x27;elephant&#x27;, &#x27;lion&#x27;, &#x27;tiger&#x27;, &#x27;giraffe&#x27;]</span></span><br><span class="line"><span class="comment"># [&#x27;elephant&#x27;, &#x27;lion&#x27;, &#x27;tiger&#x27;, &#x27;giraffe&#x27;, &#x27;monkey&#x27;, &#x27;dog&#x27;]</span></span><br><span class="line"><span class="comment"># [&#x27;elephant&#x27;, &#x27;lion&#x27;, &#x27;tiger&#x27;, &#x27;giraffe&#x27;, &#x27;monkey&#x27;, &#x27;dog&#x27;, &#x27;dino&#x27;] </span></span><br><span class="line"><span class="comment"># [&#x27;elephant&#x27;, &#x27;lion&#x27;, &#x27;tiger&#x27;, &#x27;giraffe&#x27;, &#x27;monkey&#x27;, &#x27;dog&#x27;, &#x27;dinksaur&#x27;] </span></span><br></pre></td></tr></table></figure>

<h3 id="4-3-list-操作2"><a href="#4-3-list-操作2" class="headerlink" title="4.3 list 操作2"></a>4.3 list 操作2</h3><p>通过切片可以完成列表项的修改</p>
<p>clear可以清空列表</p>
<p>sort进行排序， reverse反转排序</p>
<p>insert方法可以按索引插入列表项</p>
<p>pop方法按索引删除列表项</p>
<p>remove方法按照列表值进行删除</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(animals)</span><br><span class="line"></span><br><span class="line">animals [<span class="number">1</span>:<span class="number">3</span>] = [<span class="string">&#x27;cat&#x27;</span>] <span class="comment"># replace 2 items - &#x27;lion&#x27; and &#x27;tiger&#x27; with one iter </span></span><br><span class="line"><span class="built_in">print</span>(animals)</span><br><span class="line"></span><br><span class="line">animals [<span class="number">1</span>:<span class="number">3</span>] = [] <span class="comment"># remove 2 items - &#x27;cat&#x27; and &#x27;giraffe&#x27; from the list </span></span><br><span class="line"><span class="built_in">print</span>(animals)</span><br><span class="line"></span><br><span class="line"><span class="comment"># clear list </span></span><br><span class="line"><span class="comment"># print(animals) </span></span><br><span class="line">animals.clear() </span><br><span class="line"><span class="built_in">print</span> (animals)</span><br><span class="line"></span><br><span class="line"><span class="comment"># output: </span></span><br><span class="line"><span class="comment"># [&#x27;elephant&#x27;, &#x27;lion&#x27;, &#x27;tiger&#x27;, &#x27;giraffe&#x27;, &#x27;monkey&#x27;, &#x27;dog&#x27;] </span></span><br><span class="line"><span class="comment"># [&#x27;elephant&#x27;, &#x27;cat&#x27;, &#x27;giraffe&#x27;, &#x27;monkey&#x27;, &#x27;dog&#x27;]</span></span><br><span class="line"><span class="comment"># [&#x27;elephant&#x27;, &#x27;monkey&#x27;, &#x27;dog&#x27;]</span></span><br><span class="line"><span class="comment"># []</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sort()</span></span><br><span class="line">nums = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">10</span>] </span><br><span class="line">nums sort（）</span><br><span class="line"><span class="built_in">print</span>(nums) </span><br><span class="line"><span class="comment"># output: </span></span><br><span class="line"><span class="comment"># [1, 3, 5, 6, 9, 10] </span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nums. reverse() </span><br><span class="line"><span class="built_in">print</span> (nums) </span><br><span class="line"><span class="comment"># output: </span></span><br><span class="line"><span class="comment"># [10, 9, 6, 5, 3, 1]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># insert()</span></span><br><span class="line">nums insert(<span class="number">3</span>, <span class="number">7</span>) </span><br><span class="line"><span class="built_in">print</span> (nums)</span><br><span class="line"><span class="comment"># output: </span></span><br><span class="line"><span class="comment"># [10, 9, 6, 7, 5, 3, 1]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pop（）参数是索引值</span></span><br><span class="line">nums. pop (<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(nums)</span><br><span class="line"><span class="comment"># remove（）参数是列表项</span></span><br><span class="line">nums, remove (<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span> (nums)</span><br><span class="line"><span class="comment">#pop 弹出对应位置的内容</span></span><br><span class="line"><span class="comment">#pop一般从最后一个开始弹出</span></span><br><span class="line"><span class="comment"># output: </span></span><br><span class="line"><span class="comment"># [10, 9, 6, 5, 3, 1] [9, 6, 5, 3, 1]</span></span><br></pre></td></tr></table></figure>

<h3 id="4-4-元组Tuple"><a href="#4-4-元组Tuple" class="headerlink" title="4.4 元组Tuple"></a>4.4 元组Tuple</h3><p>元组和列表很像，但是不能添加，删除，改变其中的值<br>tuple = (1.)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alphabet = (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, ... ,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;z&#x27;</span>)</span><br><span class="line"><span class="comment"># print(alphabet length) </span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(alphabet)) </span><br><span class="line"></span><br><span class="line">nums = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">7</span>) </span><br><span class="line"><span class="built_in">print</span> (nums)</span><br><span class="line"></span><br><span class="line">nums = (<span class="number">1</span>,x) </span><br><span class="line"><span class="built_in">print</span>(nums)</span><br><span class="line"></span><br><span class="line"><span class="comment"># output: </span></span><br><span class="line"><span class="comment"># 26</span></span><br><span class="line"><span class="comment"># (1, 2, 8, 7) </span></span><br><span class="line"><span class="comment"># (1,)</span></span><br></pre></td></tr></table></figure>

<h3 id="4-5-字典1"><a href="#4-5-字典1" class="headerlink" title="4.5 字典1"></a>4.5 字典1</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">字典声明 <span class="built_in">dict</span> = [<span class="string">&quot;key1&quot;</span>:<span class="string">&quot;item&quot;</span>,<span class="string">&quot;key2&quot;</span>:<span class="string">&quot;item&quot;</span>) </span><br><span class="line"><span class="built_in">dict</span>[<span class="string">&quot;key3&quot;</span>]=<span class="string">&quot;item3&quot;</span></span><br><span class="line"><span class="keyword">del</span> <span class="built_in">dict</span>[<span class="string">&quot;key1&quot;</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># create new dictionary.</span></span><br><span class="line">phone_book = [<span class="string">&quot;John&quot;</span>: <span class="number">123</span>, <span class="string">&quot;Jane&quot;</span>: <span class="number">234</span>, <span class="string">&quot;Jerrard&quot;</span>: <span class="number">345</span>] </span><br><span class="line"><span class="built_in">print</span>(phone_book)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add new item to the dictionary </span></span><br><span class="line">phone_book [<span class="string">&quot;Jill&quot;</span>] = <span class="number">345</span></span><br><span class="line"><span class="built_in">print</span>(phone_book)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Remove key-value pair from phone_book del phone_book </span></span><br><span class="line"><span class="keyword">del</span> phone_book [<span class="string">&#x27;John&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(phone_book) </span><br><span class="line"></span><br><span class="line"><span class="comment"># print (Jane&#x27;s phone)</span></span><br><span class="line">phone_book [<span class="string">&quot;Rose&quot;</span>] = <span class="number">789</span> </span><br><span class="line"><span class="built_in">print</span>(phone_book)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> phone_book [<span class="string">&quot;Rose&quot;</span>] </span><br><span class="line"><span class="built_in">print</span>(phone_book)</span><br><span class="line"></span><br><span class="line"><span class="comment"># output: </span></span><br><span class="line"><span class="comment"># &#123;&#x27;Jonn: 123, &#x27;Jerrara&#x27;: 345, Jane: 234&#125;</span></span><br><span class="line"><span class="comment"># &#123;&#x27;Jill&#x27;: 345, &#x27;John&#x27;: 123, &#x27;Jerrard&#x27;: 345, &#x27;Jane&#x27;: 234&#125;</span></span><br><span class="line"><span class="comment"># &#123;&#x27;Jill&#x27;: 345, &#x27;Jerrard&#x27;: 345, &#x27;Jane&#x27;: 234&#125;</span></span><br><span class="line"><span class="comment"># &#123;&#x27;Rose&#x27;: 789, &#x27;Jill&#x27;: 345, &#x27;Jerrard&#x27;: 345, &#x27;Jane&#x27;: 234&#125; </span></span><br><span class="line"><span class="comment"># &#123;&#x27;Jill&#x27;: 345, &#x27;Jerrard&#x27;: 345, &#x27;Jane&#x27;: 234&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-6-字典2"><a href="#4-6-字典2" class="headerlink" title="4.6 字典2"></a>4.6 字典2</h3><p>字典中的内置函数keys，values，items，copy，get</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">grocery_list = [<span class="string">&quot;fish&quot;</span>, <span class="string">&quot;tomato&quot;</span>, <span class="string">&#x27;apples&#x27;</span>] <span class="comment"># create new list</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;tomato&quot;</span> <span class="keyword">in</span> grocery_list) <span class="comment"># check that grocery_list contains &quot;tomato&quot; item </span></span><br><span class="line">grocery_dict = [<span class="string">&quot;fish&quot;</span>: <span class="number">1</span>, <span class="string">&quot;tomato&quot;</span>: <span class="number">6</span>, <span class="string">&#x27;apples&#x27;</span>: <span class="number">3</span>] <span class="comment"># create new dictionary </span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;fish&#x27;</span> <span class="keyword">in</span> grocery_dict. keys ())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Apple&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> grocery_dict.keys()) </span><br><span class="line"><span class="built_in">print</span>(<span class="number">6</span> <span class="keyword">in</span> grocery_dict.values ())</span><br></pre></td></tr></table></figure>

<h3 id="4-7-字典3"><a href="#4-7-字典3" class="headerlink" title="4.7 字典3"></a>4.7 字典3</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># print (phone_book. keys ())</span></span><br><span class="line"><span class="built_in">print</span> (phone_book. keys()) </span><br><span class="line"><span class="built_in">print</span>(phone_book.values ()) </span><br><span class="line"><span class="comment"># print(phone_book values)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># phone_book.clear(); </span></span><br><span class="line"><span class="comment"># print(phone_book)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># phone = phone_book.copy() </span></span><br><span class="line"><span class="comment"># phone = phone_book.copy() </span></span><br><span class="line"><span class="comment"># print (phone)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print (phone_book.get(&quot;zhangsan&quot;, &quot;demo&quot;)) </span></span><br><span class="line"><span class="built_in">print</span>(phone_book.get(<span class="string">&quot;rose&quot;</span>, <span class="number">789</span>))</span><br><span class="line"><span class="built_in">print</span>(phone_book. items ())</span><br></pre></td></tr></table></figure>

<h2 id="5"><a href="#5" class="headerlink" title="5"></a>5</h2><h3 id="5-1逻辑运算符1"><a href="#5-1逻辑运算符1" class="headerlink" title="5.1逻辑运算符1"></a>5.1逻辑运算符1</h3><table>
<thead>
<tr>
<th>and</th>
<th>x and y</th>
<th>布尔“与“</th>
<th>如果x为False， x and y 返回 False，必须同时为True返回True</th>
</tr>
</thead>
<tbody><tr>
<td>or</td>
<td>x or y</td>
<td>布尔“或“</td>
<td>只有一方为True返回True.</td>
</tr>
<tr>
<td>not</td>
<td>not x</td>
<td>布尔“非“</td>
<td>如果x为True，返回False。如果x为False，它返回True.</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&quot;John&quot;</span> </span><br><span class="line">age = <span class="number">17</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(name == <span class="string">&quot;Rose&quot;</span> <span class="keyword">or</span> age = <span class="number">23</span>) </span><br><span class="line"><span class="built_in">print</span> (name = <span class="string">&quot;John&quot;</span> <span class="keyword">and</span> age == <span class="number">23</span>)</span><br><span class="line"><span class="comment"># print(John is not 23 years old)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span> (name == <span class="string">&quot;John&quot;</span> <span class="keyword">and</span> age != <span class="number">23</span>)) </span><br><span class="line"><span class="built_in">print</span>(name == <span class="string">&quot;John&quot;</span> <span class="keyword">and</span> age != <span class="number">23</span>)</span><br><span class="line"><span class="comment"># output: </span></span><br><span class="line"><span class="comment"># False </span></span><br><span class="line"><span class="comment"># False </span></span><br><span class="line"><span class="comment"># False </span></span><br><span class="line"><span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<h3 id="5-2逻辑运算符顺序"><a href="#5-2逻辑运算符顺序" class="headerlink" title="5.2逻辑运算符顺序"></a>5.2逻辑运算符顺序</h3><p>逻辑运算符顺序<br>逻辑运算符的顺序不是从左到右，顺序是先not再and最后or</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&quot;John&quot;</span> </span><br><span class="line">age = <span class="number">17</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(name == <span class="string">&quot;John&quot;</span> <span class="keyword">or</span> <span class="keyword">not</span> age &gt; <span class="number">17</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(&quot;name&quot; is &quot;Ellis&quot; or not (&quot;name&quot; equal &quot;John&quot; and he is 17 years old)) </span></span><br><span class="line"><span class="built_in">print</span> (name == <span class="string">&quot;Ellis&quot;</span> <span class="keyword">or</span> <span class="keyword">not</span> (name= <span class="string">&quot;John&quot;</span> <span class="keyword">and</span> age == <span class="number">17</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># output: </span></span><br><span class="line"><span class="comment"># True </span></span><br><span class="line"><span class="comment"># False </span></span><br></pre></td></tr></table></figure>

<h3 id="5-3-if"><a href="#5-3-if" class="headerlink" title="5.3 if"></a>5.3 if</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&quot;John&quot;</span> </span><br><span class="line">age = <span class="number">17</span></span><br><span class="line"><span class="keyword">if</span> name== <span class="string">&quot;John&quot;</span> <span class="keyword">and</span> age == <span class="number">18</span>: <span class="comment"># check that name </span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;name is John&quot;</span>)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;John is 17 years old&quot;</span>)</span><br><span class="line">    </span><br><span class="line">tasks = [<span class="string">&#x27;taskl&#x27;</span>, <span class="string">&#x27;task2&#x27;</span>] <span class="comment"># create new list </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># check if &#x27;tasks&#x27; is empty</span></span><br><span class="line"><span class="comment"># print(&quot;empty&quot;) </span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(tasks) != <span class="number">0</span>: </span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;have something&quot;</span>) </span><br></pre></td></tr></table></figure>

<h3 id="5-4-elif-else-条件语句"><a href="#5-4-elif-else-条件语句" class="headerlink" title="5.4..elif..else 条件语句"></a>5.4..elif..else 条件语句</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x= <span class="number">28</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x&lt; o:</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;x &lt; 0&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> x == <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;x is zero&#x27;</span>) </span><br><span class="line"><span class="keyword">elif</span> x == <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;dx == 1&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;non of the above is true&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="5-5-for"><a href="#5-5-for" class="headerlink" title="5.5 for"></a>5.5 for</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>): </span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    </span><br><span class="line">primes = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>] <span class="comment"># create new list </span></span><br><span class="line"><span class="comment"># iterate over primes using for loop </span></span><br><span class="line"><span class="comment"># print(prime) </span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> primes: </span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>

<h3 id="5-6字符串迭代"><a href="#5-6字符串迭代" class="headerlink" title="5.6字符串迭代"></a>5.6字符串迭代</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hello_world = <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ch <span class="keyword">in</span> hello_world: <span class="comment"># print each character from hello_world </span></span><br><span class="line">    <span class="built_in">print</span>(ch)</span><br><span class="line">    </span><br><span class="line">length = <span class="number">0</span> <span class="comment"># initialize length variable</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># count how many characters are in the hello_world using loop </span></span><br><span class="line"><span class="comment"># length += 1 # add 1 to the length on each iteration </span></span><br><span class="line"><span class="comment"># print(len(hello_world) == length)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ch <span class="keyword">in</span> hello_world: </span><br><span class="line">    length += <span class="number">1</span> </span><br><span class="line"><span class="built_in">print</span> (length)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>（hello_world） == length：</span><br><span class="line">	<span class="built_in">print</span>（“这是正确的”）</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	<span class="built_in">print</span>（<span class="string">&quot;这是错误的&quot;</span>）</span><br></pre></td></tr></table></figure>

<h2 id="6"><a href="#6" class="headerlink" title="6"></a>6</h2><h3 id="6-1-while"><a href="#6-1-while" class="headerlink" title="6.1 while"></a>6.1 while</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">square = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> square &lt;= <span class="number">10</span>:</span><br><span class="line">	<span class="built_in">print</span>(square) <span class="comment"># This code is executed 10 times </span></span><br><span class="line">    square += <span class="number">1</span>   <span class="comment"># This code is executed 10 times </span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Finished&quot;</span>) <span class="comment"># This code is executed once</span></span><br><span class="line">square = <span class="number">0</span> </span><br><span class="line">number = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print all squares from O to 99 </span></span><br><span class="line"><span class="comment"># square = number ** 2</span></span><br><span class="line"><span class="comment"># print(square)</span></span><br><span class="line"><span class="comment"># number += 1 ###</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> number &lt;= <span class="number">99</span>: </span><br><span class="line">    square = number **<span class="number">2</span> </span><br><span class="line">    <span class="built_in">print</span>(square)</span><br><span class="line">	number += <span class="number">1</span> </span><br></pre></td></tr></table></figure>

<h3 id="6-2-break"><a href="#6-2-break" class="headerlink" title="6.2 break"></a>6.2 break</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>: <span class="comment"># this condition cannot possibly be false </span></span><br><span class="line">    <span class="built_in">print</span>(count)</span><br><span class="line">	count += <span class="number">1</span> </span><br><span class="line">    <span class="keyword">if</span> count &gt;= <span class="number">5</span>: </span><br><span class="line">        <span class="keyword">break</span>		<span class="comment"># exit loop if count &gt;= 5</span></span><br><span class="line"></span><br><span class="line">zoo = [<span class="string">&quot;lion&quot;</span>, <span class="string">&#x27;tiger&#x27;</span>, <span class="string">&#x27;elephant&#x27;</span>]</span><br><span class="line"><span class="comment"># while True:  # this condition cannot possibly be false</span></span><br><span class="line"><span class="comment"># 	  animal = zoo.pop()		# extract one element from the list end</span></span><br><span class="line"><span class="comment"># 	  print(animal)</span></span><br><span class="line"><span class="comment"># 	  if exit loop if animal is &#x27;elephant&#x27;: </span></span><br><span class="line"><span class="comment"># 	      break    # exit loop</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">	animal = z00.pop() </span><br><span class="line">    <span class="built_in">print</span> (animal) </span><br><span class="line">    <span class="keyword">if</span> animal == <span class="string">&#x27;lion&#x27;</span>: </span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<h3 id="6-3-continue跳出当前循环中的剩余代码，回到下一次循环中"><a href="#6-3-continue跳出当前循环中的剩余代码，回到下一次循环中" class="headerlink" title="6.3 continue跳出当前循环中的剩余代码，回到下一次循环中"></a>6.3 continue跳出当前循环中的剩余代码，回到下一次循环中</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">	<span class="keyword">if</span> i== <span class="number">3</span>:</span><br><span class="line">		<span class="keyword">continue</span> <span class="comment"># skip the rest of the code inside loop for current i value </span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># for x in range (10):</span></span><br><span class="line"><span class="comment"># 	if Check if x is even:</span></span><br><span class="line"><span class="comment"># 		continue 	# skip print(x) for this loop </span></span><br><span class="line"><span class="comment">#	print(x)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">10</span>): </span><br><span class="line">    <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>: </span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">	<span class="built_in">print</span>(x) </span><br></pre></td></tr></table></figure>

<h2 id="7"><a href="#7" class="headerlink" title="7"></a>7</h2><h3 id="7-1-函数def函数名（函数体，代码块）："><a href="#7-1-函数def函数名（函数体，代码块）：" class="headerlink" title="7.1 函数def函数名（函数体，代码块）："></a>7.1 函数def函数名（函数体，代码块）：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>(): <span class="comment"># function named my_function</span></span><br><span class="line">	<span class="built_in">print</span>（“Hello， World！”）</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">	hello_world（）<span class="comment"># call function defined above 5 times</span></span><br></pre></td></tr></table></figure>

<h3 id="7-2函数的参数"><a href="#7-2函数的参数" class="headerlink" title="7.2函数的参数"></a>7.2函数的参数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">x</span>):  <span class="comment">#x is a function parameter </span></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;x = &quot;</span> + <span class="built_in">str</span>(x))</span><br><span class="line">    </span><br><span class="line">foo(<span class="number">5</span>) <span class="comment"># pass 5 to foo(). Here 5 is an argument passed to function foo. </span></span><br><span class="line">foo(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># define a function named &#x27;square&#x27; that prints square of passed parameter </span></span><br><span class="line"><span class="comment"># print(x ** 2)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>): </span><br><span class="line">    <span class="built_in">print</span>(x ** <span class="number">2</span>) </span><br><span class="line">    </span><br><span class="line">square(<span class="number">4</span>)</span><br><span class="line">square(<span class="number">8</span>) </span><br><span class="line">square(<span class="number">15</span>) </span><br><span class="line">square(<span class="number">23</span>) </span><br><span class="line">square(<span class="number">42</span>)</span><br></pre></td></tr></table></figure>

<h3 id="7-3-函数返回值"><a href="#7-3-函数返回值" class="headerlink" title="7.3 函数返回值"></a>7.3 函数返回值</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum_two_numbers</span> (a, b):</span><br><span class="line">    <span class="keyword">return</span> a + b	<span class="comment"># return result to the function caller</span></span><br><span class="line">c= sum_two_numbers (<span class="number">3</span>, <span class="number">12</span>) <span class="comment"># assign result of function execution to variable &#x27;c&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">n</span>):</span><br><span class="line">	result = [] <span class="comment"># 存储所有的斐波那契数列值</span></span><br><span class="line">    a = <span class="number">0</span></span><br><span class="line">	b=<span class="number">1</span></span><br><span class="line">	<span class="keyword">while</span> a &lt; n:</span><br><span class="line">		result.append (a) </span><br><span class="line">        tmp_var = b </span><br><span class="line">        b=a+b </span><br><span class="line">        a = tmp_var </span><br><span class="line">    <span class="keyword">return</span> result </span><br><span class="line"><span class="built_in">print</span>(fh(<span class="number">10</span>))</span><br></pre></td></tr></table></figure>

<h3 id="7-4-函数默认参数"><a href="#7-4-函数默认参数" class="headerlink" title="7.4 函数默认参数"></a>7.4 函数默认参数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">subject, name=<span class="string">&quot;Daniel&quot;</span></span>):</span><br><span class="line">	printHeltos y name <span class="keyword">is</span> s % (subject, name) </span><br><span class="line"></span><br><span class="line">hello(<span class="string">&quot;pycharm&quot;</span>, <span class="string">&quot;Jane&quot;</span>)</span><br><span class="line">hello(<span class="string">&quot;pycharm&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="8"><a href="#8" class="headerlink" title="8"></a>8</h2><h3 id="8-1-面向对象"><a href="#8-1-面向对象" class="headerlink" title="8.1 面向对象"></a>8.1 面向对象</h3><p>对象 object<br>    客观存在的，具象的<br>类class<br>    抽象的概念</p>
<h3 id="8-2-类"><a href="#8-2-类" class="headerlink" title="8.2 类"></a>8.2 类</h3><p>class MyClass：变量，函数<br>对象 myClass = MyClass（）<br>myClass.调用 变量及方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>: </span><br><span class="line">    variable = <span class="number">10</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">self</span>): <span class="comment"># we&#x27;ll explain self parameter later in task 4 </span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Hello from function foo&quot;</span>)</span><br><span class="line">        </span><br><span class="line">my_object = MyClass() <span class="comment"># variable &quot;my_object&quot; holds an object of the </span></span><br><span class="line">my_object. foo()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>: </span><br><span class="line">    name = <span class="string">&#x27;Rose&#x27;</span> </span><br><span class="line">    age =<span class="number">10</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">display</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;This is display function&quot;</span>) </span><br><span class="line"></span><br><span class="line">student = Student()</span><br><span class="line">student.display()</span><br></pre></td></tr></table></figure>

<h3 id="8-3-变量的访问"><a href="#8-3-变量的访问" class="headerlink" title="8.3 变量的访问"></a>8.3 变量的访问</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>: </span><br><span class="line">    variablel = <span class="number">1</span> </span><br><span class="line">    variable2 = <span class="number">2</span></span><br><span class="line">    </span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">self</span>): <span class="comment"># we&#x27;ll explain self parameter later in task 4 </span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Hello from function foo&quot;</span>)</span><br><span class="line">        </span><br><span class="line">my_object = MyClass() </span><br><span class="line">my_object1 = MyClass () </span><br><span class="line">my_object.variable2 = <span class="number">3</span></span><br><span class="line"><span class="comment"># change value stored in variable2 in my_object </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(my_objkct.variable2)</span><br><span class="line"><span class="built_in">print</span>(my_object1.variable2) </span><br><span class="line">my_object. foo()</span><br><span class="line"><span class="comment"># call method foo() of object my_object </span></span><br><span class="line"><span class="comment"># print(value of variablel from my_object)</span></span><br></pre></td></tr></table></figure>

<h3 id="8-4类中变量的访问练习"><a href="#8-4类中变量的访问练习" class="headerlink" title="8.4类中变量的访问练习"></a>8.4类中变量的访问练习</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>:</span><br><span class="line">	color = <span class="string">&quot;</span></span><br><span class="line"><span class="string">	def description(self):</span></span><br><span class="line"><span class="string">		description_string = &quot;</span>This <span class="keyword">is</span> a %s car.<span class="string">&quot; &amp; self.color </span></span><br><span class="line"><span class="string">        return description_string</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">car1 = Car() </span></span><br><span class="line"><span class="string">car2 = Car()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">rl.color = &quot;</span>blue<span class="string">&quot; </span></span><br><span class="line"><span class="string">car2.color = &quot;</span>red<span class="string">&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print(car1.description())</span></span><br><span class="line"><span class="string">print(car2pdescription())</span></span><br></pre></td></tr></table></figure>

<h3 id="8-5-self-关键字"><a href="#8-5-self-关键字" class="headerlink" title="8.5 self 关键字"></a>8.5 self 关键字</h3><p>python中的约定<br>在类的定义中，定义的方法第一个参数一定是self，表示的是对当前创建对象的引用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span>:</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, real_part, imag_part</span>): </span><br><span class="line">        self.r = real_part</span><br><span class="line">		self.i = imag_part</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Calculator</span>: </span><br><span class="line">    current = <span class="number">0</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">add</span> (self, amount): </span><br><span class="line">        <span class="comment"># add number to current </span></span><br><span class="line">        self.current += amount</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">get_current</span> (self): </span><br><span class="line">        <span class="keyword">return</span> self.current</span><br><span class="line">    </span><br><span class="line">calculator = Calculator()</span><br><span class="line">calculator.add (<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(calculator.gelt_current()) </span><br></pre></td></tr></table></figure>

<h3 id="8-6-init方法"><a href="#8-6-init方法" class="headerlink" title="8.6 init方法"></a>8.6 init方法</h3><p>def_init_(self)<br>_init_方法 在对象创建过程中自动执行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span>:</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">init_</span>(<span class="params">self</span>):</span><br><span class="line">	<span class="comment"># special method init </span></span><br><span class="line">    	self.sides = <span class="number">4</span></span><br><span class="line">        </span><br><span class="line">square = Square() </span><br><span class="line"><span class="built_in">print</span>(square.sides) </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>:</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">init_</span>(<span class="params">self, color</span>): </span><br><span class="line">        self.color = color</span><br><span class="line">        </span><br><span class="line">car = Car(<span class="string">&quot;blue&quot;</span>) <span class="comment"># Note: you should not pass self </span></span><br><span class="line"><span class="built_in">print</span>(caf.collor)</span><br></pre></td></tr></table></figure>

<h2 id="9"><a href="#9" class="headerlink" title="9"></a>9</h2><h3 id="9-1-模块"><a href="#9-1-模块" class="headerlink" title="9.1 模块"></a>9.1 模块</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">Modules in Python are simply Python files with the .py extension containing oo0 Python definitions and statements.</span><br><span class="line"></span><br><span class="line">Modules can be handy when you want to use your</span><br><span class="line">function in a number of programs without copying its definition into each program. </span><br><span class="line"></span><br><span class="line">Modules are imported from other modules using the</span><br><span class="line">&quot;import&quot; keyword and the file name without arr extension. </span><br><span class="line"></span><br><span class="line">The first time a module is loaded into a running Python script, it is initialized by executing the code in the module once. </span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">Import the module my_module and use the hello_world function. </span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Calculator.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Calculator</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init_</span>(<span class="params">self</span>):</span><br><span class="line">        self.current = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span> (self, amount):</span><br><span class="line">        self.current += amount</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_current</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.current</span><br></pre></td></tr></table></figure>

<p>my_module.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span> (name):</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;Hello, World! My name is %s&quot;</span> % name)</span><br></pre></td></tr></table></figure>

<p>imports.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> calculator my_module sson3</span><br><span class="line"></span><br><span class="line">calc = calculator.Calculator()		<span class="comment"># create new </span></span><br><span class="line">calc.add (<span class="number">2</span>) </span><br><span class="line"><span class="built_in">print</span>(calc.get_current()) </span><br><span class="line"></span><br><span class="line"><span class="comment"># here import my_module</span></span><br><span class="line"><span class="comment"># call function hello_world from my_module</span></span><br><span class="line"></span><br><span class="line">my_module.hello_world(“Daniel”)	</span><br></pre></td></tr></table></figure>

<h3 id="9-2-from…import"><a href="#9-2-from…import" class="headerlink" title="9.2 from…import"></a>9.2 from…import</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">One form of the import statement imports names from a module directly </span><br><span class="line">into the importing module&#x27;s symbol table.</span><br><span class="line">This way you can use the imported name directly without the module_name prefix. </span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">Import hello_world function from my_module. Check the difference with taskl.     </span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> calculator <span class="keyword">import</span> Calculator</span><br><span class="line"></span><br><span class="line">calc = Calculator() <span class="comment"># here we can use Calculator class directly without </span></span><br><span class="line">calc.add (<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(calc.get_current())</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> my_module <span class="keyword">import</span> hello_world:</span><br><span class="line"><span class="built_in">print</span> (hello_world()) <span class="comment"># Note: hello_world function used without prefix</span></span><br></pre></td></tr></table></figure>

<h3 id="9-3-内建模块"><a href="#9-3-内建模块" class="headerlink" title="9.3 内建模块"></a>9.3 内建模块</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime random, math</span><br><span class="line"><span class="built_in">print</span>(datetime.datetime. today())</span><br><span class="line"><span class="built_in">print</span> (random. randint(<span class="number">1000</span>, <span class="number">9999</span>)) </span><br><span class="line"><span class="built_in">print</span>(math.<span class="built_in">pow</span>(<span class="number">2</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure>

<h2 id="10"><a href="#10" class="headerlink" title="10"></a>10</h2><h3 id="10-1-写文件"><a href="#10-1-写文件" class="headerlink" title="10.1 写文件"></a>10.1 写文件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">If you open a file using &quot;w&quot; (write) as the second argument, </span><br><span class="line">a new empty file will be created.</span><br><span class="line">Note that if another file with the same name exists,f it will be deleted. </span><br><span class="line">If you want to add some content to an existing file,</span><br><span class="line">you should use the &quot;a&quot; (append) modifier. </span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">Add elements from the &quot;zoo&quot; list to &quot;output.txt&quot;. </span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 替换原有内容</span></span><br><span class="line">zoo = [<span class="string">&#x27;lion&#x27;</span>, <span class="string">&quot;elephant&quot;</span>, <span class="string">&#x27;monkey&#x27;</span>]</span><br><span class="line"><span class="comment"># if name== &quot;main&quot;:</span></span><br><span class="line"><span class="comment"># f = open (&quot;output.txt&quot;, add modifier) </span></span><br><span class="line"><span class="comment"># for i in zoo:</span></span><br><span class="line"><span class="comment"># 		add the whole zoo to the output.txt </span></span><br><span class="line"><span class="comment"># 		close the file</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> _name== <span class="string">&quot;_main_&quot;</span>: </span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&#x27;w&#x27;</span>) </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> zoo:</span><br><span class="line">		f.write(i) </span><br><span class="line">	f.close()</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 在源文件内容后增加</span></span><br><span class="line">zoo = [<span class="string">&#x27;lion&#x27;</span>, <span class="string">&quot;elephant&quot;</span>, <span class="string">&#x27;monkey&#x27;</span>]</span><br><span class="line"><span class="comment"># if name== &quot;main&quot;:</span></span><br><span class="line"><span class="comment"># f = open (&quot;output.txt&quot;, add modifier) </span></span><br><span class="line"><span class="comment"># for i in zoo:</span></span><br><span class="line"><span class="comment"># 		add the whole zoo to the output.txt </span></span><br><span class="line"><span class="comment"># 		close the file</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> _name== <span class="string">&quot;_main_&quot;</span>: </span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&#x27;a&#x27;</span>) </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> zoo:</span><br><span class="line">		f.write(i) </span><br><span class="line">	f.close()</span><br></pre></td></tr></table></figure>

<h3 id="10-2-读文件"><a href="#10-2-读文件" class="headerlink" title="10.2 读文件"></a>10.2 读文件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">Python has a number of built-in functions to read and write information from a file on your computer. </span><br><span class="line">The &quot;open&quot; function is used to open a file.</span><br><span class="line"></span><br><span class="line">The file can be opened in read mode (using &quot;r&quot; as the second argument) or </span><br><span class="line">in write mode (using &quot;w&quot; as the second argument).</span><br><span class="line">The &quot;open&quot; function returns the file object. </span><br><span class="line">You need to store it to close the file later. </span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">Print the contents of &quot;input.txt&quot; to output. Print the first line of &quot;input1.txt&quot;. </span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f. readlines (): </span><br><span class="line">    <span class="built_in">print</span>(line)</span><br><span class="line">aclose()</span><br><span class="line"></span><br><span class="line"><span class="comment"># fl = open(&quot;input1.txt&quot;, &quot;r&quot;) </span></span><br><span class="line"><span class="comment"># print only first line of fl </span></span><br><span class="line"><span class="comment"># do not forget to close file </span></span><br><span class="line">f1 = <span class="built_in">open</span>(<span class="string">&quot;input1.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) </span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f1. readlines (): </span><br><span class="line">    <span class="built_in">print</span>(line)</span><br><span class="line">f1.close()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>切换回经典右键菜单</title>
    <url>/2022/03/18/Windows/%E5%88%87%E6%8D%A2%E5%9B%9E%E7%BB%8F%E5%85%B8%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95/</url>
    <content><![CDATA[<h1 id="切换回经典右键菜单"><a href="#切换回经典右键菜单" class="headerlink" title="切换回经典右键菜单"></a>切换回经典右键菜单</h1><p><a class="link"   href="https://blog.csdn.net/p2003722/article/details/120769690" >参考<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="1）切换回经典"><a href="#1）切换回经典" class="headerlink" title="1）切换回经典"></a>1）切换回经典</h2><p> 打开Windows powershell（管理员）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">reg add <span class="string">&quot;HKCU\Software\Classes\CLSID\&#123;86ca1aa0-34aa-4e8b-a509-50c905bae2a2&#125;\InprocServer32&quot;</span> /f /ve</span><br></pre></td></tr></table></figure>



<h2 id="2）恢复到新版"><a href="#2）恢复到新版" class="headerlink" title="2）恢复到新版"></a>2）恢复到新版</h2><p> 打开Windows powershell（管理员）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">reg delete <span class="string">&quot;HKCU\Software\Classes\CLSID\&#123;86ca1aa0-34aa-4e8b-a509-50c905bae2a2&#125;&quot;</span> /f</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>UUPDUMP下不动</title>
    <url>/2022/03/18/Windows/UUPDUMP%E4%B8%8B%E4%B8%8D%E5%8A%A8/</url>
    <content><![CDATA[<h1 id="UUPDUMP下不动"><a href="#UUPDUMP下不动" class="headerlink" title="UUPDUMP下不动"></a>UUPDUMP下不动</h1><p>打开win.cmd文件</p>
<p>代理设置改为系统加速器所用通道</p>
<p>（注意双引号在最外面）</p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>UWP应用绕过代理</title>
    <url>/2022/03/18/Windows/UWP%E5%BA%94%E7%94%A8%E7%BB%95%E8%BF%87%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h2 id="注册表路径"><a href="#注册表路径" class="headerlink" title="注册表路径"></a>注册表路径</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HKEY_CURRENT_USER\Software\Classes\Local Settings\Software\Microsoft\Windows\CurrentVersion\AppContainer\Mappings</span><br></pre></td></tr></table></figure>



<h2 id="CMD命令"><a href="#CMD命令" class="headerlink" title="CMD命令"></a>CMD命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CheckNetIsolation.exe loopbackexempt -a -p=</span><br></pre></td></tr></table></figure>



<h2 id="具体指令"><a href="#具体指令" class="headerlink" title="具体指令"></a>具体指令</h2><p><strong>便签</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CheckNetIsolation.exe loopbackexempt -a -p=S-1-15-2-3539788797-2700867667-1432428195-1581642-2885308443-3834444517-2495346167</span><br></pre></td></tr></table></figure>

<p><strong>OneNote</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CheckNetIsolation.exe loopbackexempt -a -p=S-1-15-2-3445883232-1224167743-206467785-1580939083-2750001491-3097792036-3019341970</span><br></pre></td></tr></table></figure>

<p><strong>QQ音乐</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CheckNetIsolation.exe loopbackexempt -a -p=S-1-15-2-1971894009-4117020779-3514498563-3192240937-1419126668-1560270856-676699529</span><br></pre></td></tr></table></figure>

<p><strong>哔哩哔哩</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CheckNetIsolation.exe loopbackexempt -a -p=S-1-15-2-4091843776-1243804748-1367707030-686088537-118659545-1271627824-1744311777</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CheckNetIsolation.exe loopbackexempt -a -p=S-1-15-2-2537927067-2140208811-1083047336-3825492100-1188134376-3459723148-3131426163</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CheckNetIsolation.exe loopbackexempt -a -p=S-1-15-2-2040986369-264322980-3882385089-1970153872-3662121739-3363227934-2464603330</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CheckNetIsolation.exe loopbackexempt -a -p=S-1-15-2-1609473798-1231923017-684268153-4268514328-882773646-2760585773-1760938157</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CheckNetIsolation.exe loopbackexempt -a -p=S-1-15-2-1239072475-3687740317-1842961305-3395936705-4023953123-1525404051-2779347315</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CheckNetIsolation.exe loopbackexempt -a -p=S-1-15-2-466767348-3739614953-2700836392-1801644223-4227750657-1087833535-2488631167</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>UWP</tag>
      </tags>
  </entry>
</search>
